Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON declara_vars program_fun mainF
Rule 2     program_fun -> funs
Rule 3     funs -> function_t funs
Rule 4     funs -> function_v funs
Rule 5     funs -> empty
Rule 6     mainF -> mainFI declara_vars mainF1 RCURBRA
Rule 7     mainFI -> mainF_sign LCURBRA
Rule 8     mainF_sign -> MAINF
Rule 9     mainF1 -> stmt_v mainF1
Rule 10    mainF1 -> empty
Rule 11    declara_vars -> vars declara_vars
Rule 12    declara_vars -> empty
Rule 13    vars -> type ID dimensionada equals exp SEMICOLON
Rule 14    vars -> type ID dimensionada SEMICOLON
Rule 15    dimensionada -> LBRACK CTE_INT RBRACK
Rule 16    dimensionada -> LBRACK CTE_INT RBRACK LBRACK CTE_INT RBRACK
Rule 17    dimensionada -> empty
Rule 18    loop -> while
Rule 19    loop -> for_v2
Rule 20    stmt -> assignment
Rule 21    stmt -> condition
Rule 22    stmt -> print
Rule 23    stmt -> loop
Rule 24    stmt -> read
Rule 25    stmt -> graphstmt
Rule 26    stmt -> funCall SEMICOLON
Rule 27    stmt -> return
Rule 28    stmt_v -> assignment
Rule 29    stmt_v -> condition
Rule 30    stmt_v -> print
Rule 31    stmt_v -> loop
Rule 32    stmt_v -> read
Rule 33    stmt_v -> graphstmt
Rule 34    stmt_v -> funCall SEMICOLON
Rule 35    assignment -> id equals assignment3 SEMICOLON
Rule 36    assignment3 -> exp
Rule 37    assignment3 -> read
Rule 38    vcte -> cte_int
Rule 39    vcte -> cte_float
Rule 40    vcte -> cte_string
Rule 41    vcte -> id
Rule 42    vcte -> funCall
Rule 43    vcte -> vectormatriz
Rule 44    vectormatriz -> LBRACK vm1 RBRACK
Rule 45    vectormatriz -> vm1
Rule 46    vm1 -> LBRACK vm2 RBRACK COMMA vm1
Rule 47    vm1 -> LBRACK vm2 RBRACK
Rule 48    vm2 -> exp COMMA vm2
Rule 49    vm2 -> exp
Rule 50    vm2 -> empty
Rule 51    functionI -> type ID
Rule 52    functionV -> VOID ID
Rule 53    function_t -> FUNCTION functionI function2 inicia_fun declara_vars function4 termina_fun
Rule 54    function_v -> FUNCTION functionV function2 inicia_fun declara_vars function9 termina_fun
Rule 55    inicia_fun -> LCURBRA
Rule 56    termina_fun -> RCURBRA
Rule 57    function2 -> LPARENT function3 RPARENT
Rule 58    function3 -> funParam function5
Rule 59    function3 -> empty
Rule 60    function4 -> stmt function4
Rule 61    function4 -> empty
Rule 62    function9 -> stmt_v function9
Rule 63    function9 -> empty
Rule 64    function5 -> COMMA funParam function5
Rule 65    function5 -> empty
Rule 66    funParam -> type ID
Rule 67    type -> INT
Rule 68    type -> FLOAT
Rule 69    type -> STRING
Rule 70    print -> PRINT LPARENT expression RPARENT SEMICOLON
Rule 71    read -> READ LPARENT id read1 RPARENT SEMICOLON
Rule 72    read1 -> LBRACK exp RBRACK LBRACK exp RBRACK
Rule 73    read1 -> LBRACK exp RBRACK
Rule 74    read1 -> empty
Rule 75    equals -> EQUAL
Rule 76    indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK
Rule 77    indice_dimensionada -> LBRACK exp RBRACK
Rule 78    indice_dimensionada -> empty
Rule 79    aidi -> ID
Rule 80    id -> aidi indice_dimensionada
Rule 81    funCall -> ID iniciaFunCall funCall2 terminaFunCall
Rule 82    iniciaFunCall -> LPARENT
Rule 83    terminaFunCall -> RPARENT
Rule 84    funCall2 -> funCallParam funCall3
Rule 85    funCall2 -> empty
Rule 86    funCall3 -> COMMA funCallParam funCall3
Rule 87    funCall3 -> empty
Rule 88    funCallParam -> exp
Rule 89    cte_int -> negativo CTE_INT
Rule 90    cte_float -> negativo CTE_FLOAT
Rule 91    cte_string -> CTE_STRING
Rule 92    return -> RETURN return1 SEMICOLON
Rule 93    return1 -> vcte
Rule 94    return1 -> exp
Rule 95    loper -> GREATERT
Rule 96    loper -> MINORT
Rule 97    loper -> GREATEREQT
Rule 98    loper -> MINOREQT
Rule 99    loper -> DIFFERENT
Rule 100   loper -> ISEQUAL
Rule 101   condition -> IF head_cond body condition1
Rule 102   condition1 -> elseif head_cond body condition1
Rule 103   condition1 -> else body
Rule 104   condition1 -> empty
Rule 105   elseif -> ELSEIF
Rule 106   else -> ELSE
Rule 107   head_cond -> LPARENT expression close_condition
Rule 108   body -> LCURBRA body1 RCURBRA
Rule 109   close_condition -> RPARENT
Rule 110   body1 -> stmt body1
Rule 111   body1 -> empty
Rule 112   for_v2 -> nuevo_for forBody
Rule 113   nuevo_for -> FOR LPARENT id COLON for2 RPARENT
Rule 114   for2 -> exp
Rule 115   forBody -> body
Rule 116   while -> while1 body
Rule 117   while1 -> while_w LPARENT expression RPARENT
Rule 118   while_w -> WHILE
Rule 119   dosExp -> LPARENT exp COMMA exp RPARENT
Rule 120   unaExp -> LPARENT exp RPARENT
Rule 121   graphstmt -> graphfig
Rule 122   graphstmt -> graphview
Rule 123   graphstmt -> graphmove
Rule 124   graphfig -> graphfig1 SEMICOLON
Rule 125   graphfig -> graphfig2 SEMICOLON
Rule 126   graphfig1 -> CIRCLE unaExp
Rule 127   graphfig1 -> SQUARE unaExp
Rule 128   graphfig1 -> TRIANGLE unaExp
Rule 129   graphfig2 -> RECTANGLE dosExp
Rule 130   graphmove -> graphmove0 SEMICOLON
Rule 131   graphmove -> graphmove1 SEMICOLON
Rule 132   graphmove0 -> DOWN
Rule 133   graphmove0 -> UP
Rule 134   graphmove1 -> GO unaExp
Rule 135   graphmove1 -> LEFT unaExp
Rule 136   graphmove1 -> RIGHT unaExp
Rule 137   graphmove1 -> BACK unaExp
Rule 138   graphview -> graphview0 SEMICOLON
Rule 139   graphview -> graphview1 SEMICOLON
Rule 140   graphview -> graphview2 SEMICOLON
Rule 141   graphview0 -> EXIT
Rule 142   graphview0 -> START_F
Rule 143   graphview0 -> END_F
Rule 144   graphview1 -> POINTER_COLOR unaExp
Rule 145   graphview1 -> POINTER_SIZE unaExp
Rule 146   graphview1 -> SPEED unaExp
Rule 147   graphview2 -> POSITION dosExp
Rule 148   expression -> exp loper exp
Rule 149   expression -> exp
Rule 150   exp -> term
Rule 151   exp -> term exp_o exp
Rule 152   exp_o -> PLUS
Rule 153   exp_o -> MINUS
Rule 154   openP -> LPARENT
Rule 155   closeP -> RPARENT
Rule 156   term -> factor term_o term
Rule 157   term -> factor
Rule 158   term_o -> MULT
Rule 159   term_o -> DIVIDE
Rule 160   factor -> vcte
Rule 161   factor -> openP expression closeP
Rule 162   negativo -> MINUS
Rule 163   negativo -> empty
Rule 164   empty -> <empty>

Terminals, with rules where they appear

BACK                 : 137
CIRCLE               : 126
COLON                : 113
COMMA                : 46 48 64 86 119
CTE_FLOAT            : 90
CTE_INT              : 15 16 16 89
CTE_STRING           : 91
DIFFERENT            : 99
DIVIDE               : 159
DOWN                 : 132
ELSE                 : 106
ELSEIF               : 105
END_F                : 143
EQUAL                : 75
EXIT                 : 141
FLOAT                : 68
FOR                  : 113
FUNCTION             : 53 54
GO                   : 134
GREATEREQT           : 97
GREATERT             : 95
ID                   : 1 13 14 51 52 66 79 81
IF                   : 101
INT                  : 67
ISEQUAL              : 100
LBRACK               : 15 16 16 44 46 47 72 72 73 76 76 77
LCURBRA              : 7 55 108
LEFT                 : 135
LPARENT              : 57 70 71 82 107 113 117 119 120 154
MAINF                : 8
MINOREQT             : 98
MINORT               : 96
MINUS                : 153 162
MULT                 : 158
PLUS                 : 152
POINTER_COLOR        : 144
POINTER_SIZE         : 145
POSITION             : 147
PRINT                : 70
PROGRAM              : 1
RBRACK               : 15 16 16 44 46 47 72 72 73 76 76 77
RCURBRA              : 6 56 108
READ                 : 71
RECTANGLE            : 129
RETURN               : 92
RIGHT                : 136
RPARENT              : 57 70 71 83 109 113 117 119 120 155
SEMICOLON            : 1 13 14 26 34 35 70 71 92 124 125 130 131 138 139 140
SPEED                : 146
SQUARE               : 127
START_F              : 142
STRING               : 69
TRIANGLE             : 128
UP                   : 133
VOID                 : 52
WHILE                : 118
error                : 

Nonterminals, with rules where they appear

aidi                 : 80
assignment           : 20 28
assignment3          : 35
body                 : 101 102 103 115 116
body1                : 108 110
closeP               : 161
close_condition      : 107
condition            : 21 29
condition1           : 101 102
cte_float            : 39
cte_int              : 38
cte_string           : 40
declara_vars         : 1 6 11 53 54
dimensionada         : 13 14
dosExp               : 129 147
else                 : 103
elseif               : 102
empty                : 5 10 12 17 50 59 61 63 65 74 78 85 87 104 111 163
equals               : 13 35
exp                  : 13 36 48 49 72 72 73 76 76 77 88 94 114 119 119 120 148 148 149 151
exp_o                : 151
expression           : 70 107 117 161
factor               : 156 157
for2                 : 113
forBody              : 112
for_v2               : 19
funCall              : 26 34 42
funCall2             : 81
funCall3             : 84 86
funCallParam         : 84 86
funParam             : 58 64
function2            : 53 54
function3            : 57
function4            : 53 60
function5            : 58 64
function9            : 54 62
functionI            : 53
functionV            : 54
function_t           : 3
function_v           : 4
funs                 : 2 3 4
graphfig             : 121
graphfig1            : 124
graphfig2            : 125
graphmove            : 123
graphmove0           : 130
graphmove1           : 131
graphstmt            : 25 33
graphview            : 122
graphview0           : 138
graphview1           : 139
graphview2           : 140
head_cond            : 101 102
id                   : 35 41 71 113
indice_dimensionada  : 80
iniciaFunCall        : 81
inicia_fun           : 53 54
loop                 : 23 31
loper                : 148
mainF                : 1
mainF1               : 6 9
mainFI               : 6
mainF_sign           : 7
negativo             : 89 90
nuevo_for            : 112
openP                : 161
print                : 22 30
program              : 0
program_fun          : 1
read                 : 24 32 37
read1                : 71
return               : 27
return1              : 92
stmt                 : 60 110
stmt_v               : 9 62
term                 : 150 151 156
term_o               : 156
terminaFunCall       : 81
termina_fun          : 53 54
type                 : 13 14 51 66
unaExp               : 126 127 128 134 135 136 137 144 145 146
vars                 : 11
vcte                 : 93 160
vectormatriz         : 43
vm1                  : 44 45 46
vm2                  : 46 47 48
while                : 18
while1               : 116
while_w              : 117

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON declara_vars program_fun mainF

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON declara_vars program_fun mainF

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON declara_vars program_fun mainF

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . declara_vars program_fun mainF
    (11) declara_vars -> . vars declara_vars
    (12) declara_vars -> . empty
    (13) vars -> . type ID dimensionada equals exp SEMICOLON
    (14) vars -> . type ID dimensionada SEMICOLON
    (164) empty -> .
    (67) type -> . INT
    (68) type -> . FLOAT
    (69) type -> . STRING

    FUNCTION        reduce using rule 164 (empty -> .)
    MAINF           reduce using rule 164 (empty -> .)
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11

    declara_vars                   shift and go to state 5
    vars                           shift and go to state 6
    empty                          shift and go to state 7
    type                           shift and go to state 8

state 5

    (1) program -> PROGRAM ID SEMICOLON declara_vars . program_fun mainF
    (2) program_fun -> . funs
    (3) funs -> . function_t funs
    (4) funs -> . function_v funs
    (5) funs -> . empty
    (53) function_t -> . FUNCTION functionI function2 inicia_fun declara_vars function4 termina_fun
    (54) function_v -> . FUNCTION functionV function2 inicia_fun declara_vars function9 termina_fun
    (164) empty -> .

    FUNCTION        shift and go to state 17
    MAINF           reduce using rule 164 (empty -> .)

    program_fun                    shift and go to state 12
    funs                           shift and go to state 13
    function_t                     shift and go to state 14
    function_v                     shift and go to state 15
    empty                          shift and go to state 16

state 6

    (11) declara_vars -> vars . declara_vars
    (11) declara_vars -> . vars declara_vars
    (12) declara_vars -> . empty
    (13) vars -> . type ID dimensionada equals exp SEMICOLON
    (14) vars -> . type ID dimensionada SEMICOLON
    (164) empty -> .
    (67) type -> . INT
    (68) type -> . FLOAT
    (69) type -> . STRING

    FUNCTION        reduce using rule 164 (empty -> .)
    MAINF           reduce using rule 164 (empty -> .)
    IF              reduce using rule 164 (empty -> .)
    PRINT           reduce using rule 164 (empty -> .)
    READ            reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    FOR             reduce using rule 164 (empty -> .)
    CIRCLE          reduce using rule 164 (empty -> .)
    SQUARE          reduce using rule 164 (empty -> .)
    TRIANGLE        reduce using rule 164 (empty -> .)
    RECTANGLE       reduce using rule 164 (empty -> .)
    EXIT            reduce using rule 164 (empty -> .)
    START_F         reduce using rule 164 (empty -> .)
    END_F           reduce using rule 164 (empty -> .)
    POINTER_COLOR   reduce using rule 164 (empty -> .)
    POINTER_SIZE    reduce using rule 164 (empty -> .)
    SPEED           reduce using rule 164 (empty -> .)
    POSITION        reduce using rule 164 (empty -> .)
    DOWN            reduce using rule 164 (empty -> .)
    UP              reduce using rule 164 (empty -> .)
    GO              reduce using rule 164 (empty -> .)
    LEFT            reduce using rule 164 (empty -> .)
    RIGHT           reduce using rule 164 (empty -> .)
    BACK            reduce using rule 164 (empty -> .)
    WHILE           reduce using rule 164 (empty -> .)
    RCURBRA         reduce using rule 164 (empty -> .)
    RETURN          reduce using rule 164 (empty -> .)
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11

    vars                           shift and go to state 6
    declara_vars                   shift and go to state 18
    empty                          shift and go to state 7
    type                           shift and go to state 8

state 7

    (12) declara_vars -> empty .

    FUNCTION        reduce using rule 12 (declara_vars -> empty .)
    MAINF           reduce using rule 12 (declara_vars -> empty .)
    IF              reduce using rule 12 (declara_vars -> empty .)
    PRINT           reduce using rule 12 (declara_vars -> empty .)
    READ            reduce using rule 12 (declara_vars -> empty .)
    ID              reduce using rule 12 (declara_vars -> empty .)
    FOR             reduce using rule 12 (declara_vars -> empty .)
    CIRCLE          reduce using rule 12 (declara_vars -> empty .)
    SQUARE          reduce using rule 12 (declara_vars -> empty .)
    TRIANGLE        reduce using rule 12 (declara_vars -> empty .)
    RECTANGLE       reduce using rule 12 (declara_vars -> empty .)
    EXIT            reduce using rule 12 (declara_vars -> empty .)
    START_F         reduce using rule 12 (declara_vars -> empty .)
    END_F           reduce using rule 12 (declara_vars -> empty .)
    POINTER_COLOR   reduce using rule 12 (declara_vars -> empty .)
    POINTER_SIZE    reduce using rule 12 (declara_vars -> empty .)
    SPEED           reduce using rule 12 (declara_vars -> empty .)
    POSITION        reduce using rule 12 (declara_vars -> empty .)
    DOWN            reduce using rule 12 (declara_vars -> empty .)
    UP              reduce using rule 12 (declara_vars -> empty .)
    GO              reduce using rule 12 (declara_vars -> empty .)
    LEFT            reduce using rule 12 (declara_vars -> empty .)
    RIGHT           reduce using rule 12 (declara_vars -> empty .)
    BACK            reduce using rule 12 (declara_vars -> empty .)
    WHILE           reduce using rule 12 (declara_vars -> empty .)
    RCURBRA         reduce using rule 12 (declara_vars -> empty .)
    RETURN          reduce using rule 12 (declara_vars -> empty .)


state 8

    (13) vars -> type . ID dimensionada equals exp SEMICOLON
    (14) vars -> type . ID dimensionada SEMICOLON

    ID              shift and go to state 19


state 9

    (67) type -> INT .

    ID              reduce using rule 67 (type -> INT .)


state 10

    (68) type -> FLOAT .

    ID              reduce using rule 68 (type -> FLOAT .)


state 11

    (69) type -> STRING .

    ID              reduce using rule 69 (type -> STRING .)


state 12

    (1) program -> PROGRAM ID SEMICOLON declara_vars program_fun . mainF
    (6) mainF -> . mainFI declara_vars mainF1 RCURBRA
    (7) mainFI -> . mainF_sign LCURBRA
    (8) mainF_sign -> . MAINF

    MAINF           shift and go to state 23

    mainF                          shift and go to state 20
    mainFI                         shift and go to state 21
    mainF_sign                     shift and go to state 22

state 13

    (2) program_fun -> funs .

    MAINF           reduce using rule 2 (program_fun -> funs .)


state 14

    (3) funs -> function_t . funs
    (3) funs -> . function_t funs
    (4) funs -> . function_v funs
    (5) funs -> . empty
    (53) function_t -> . FUNCTION functionI function2 inicia_fun declara_vars function4 termina_fun
    (54) function_v -> . FUNCTION functionV function2 inicia_fun declara_vars function9 termina_fun
    (164) empty -> .

    FUNCTION        shift and go to state 17
    MAINF           reduce using rule 164 (empty -> .)

    function_t                     shift and go to state 14
    funs                           shift and go to state 24
    function_v                     shift and go to state 15
    empty                          shift and go to state 16

state 15

    (4) funs -> function_v . funs
    (3) funs -> . function_t funs
    (4) funs -> . function_v funs
    (5) funs -> . empty
    (53) function_t -> . FUNCTION functionI function2 inicia_fun declara_vars function4 termina_fun
    (54) function_v -> . FUNCTION functionV function2 inicia_fun declara_vars function9 termina_fun
    (164) empty -> .

    FUNCTION        shift and go to state 17
    MAINF           reduce using rule 164 (empty -> .)

    function_v                     shift and go to state 15
    funs                           shift and go to state 25
    function_t                     shift and go to state 14
    empty                          shift and go to state 16

state 16

    (5) funs -> empty .

    MAINF           reduce using rule 5 (funs -> empty .)


state 17

    (53) function_t -> FUNCTION . functionI function2 inicia_fun declara_vars function4 termina_fun
    (54) function_v -> FUNCTION . functionV function2 inicia_fun declara_vars function9 termina_fun
    (51) functionI -> . type ID
    (52) functionV -> . VOID ID
    (67) type -> . INT
    (68) type -> . FLOAT
    (69) type -> . STRING

    VOID            shift and go to state 29
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11

    functionI                      shift and go to state 26
    functionV                      shift and go to state 27
    type                           shift and go to state 28

state 18

    (11) declara_vars -> vars declara_vars .

    FUNCTION        reduce using rule 11 (declara_vars -> vars declara_vars .)
    MAINF           reduce using rule 11 (declara_vars -> vars declara_vars .)
    IF              reduce using rule 11 (declara_vars -> vars declara_vars .)
    PRINT           reduce using rule 11 (declara_vars -> vars declara_vars .)
    READ            reduce using rule 11 (declara_vars -> vars declara_vars .)
    ID              reduce using rule 11 (declara_vars -> vars declara_vars .)
    FOR             reduce using rule 11 (declara_vars -> vars declara_vars .)
    CIRCLE          reduce using rule 11 (declara_vars -> vars declara_vars .)
    SQUARE          reduce using rule 11 (declara_vars -> vars declara_vars .)
    TRIANGLE        reduce using rule 11 (declara_vars -> vars declara_vars .)
    RECTANGLE       reduce using rule 11 (declara_vars -> vars declara_vars .)
    EXIT            reduce using rule 11 (declara_vars -> vars declara_vars .)
    START_F         reduce using rule 11 (declara_vars -> vars declara_vars .)
    END_F           reduce using rule 11 (declara_vars -> vars declara_vars .)
    POINTER_COLOR   reduce using rule 11 (declara_vars -> vars declara_vars .)
    POINTER_SIZE    reduce using rule 11 (declara_vars -> vars declara_vars .)
    SPEED           reduce using rule 11 (declara_vars -> vars declara_vars .)
    POSITION        reduce using rule 11 (declara_vars -> vars declara_vars .)
    DOWN            reduce using rule 11 (declara_vars -> vars declara_vars .)
    UP              reduce using rule 11 (declara_vars -> vars declara_vars .)
    GO              reduce using rule 11 (declara_vars -> vars declara_vars .)
    LEFT            reduce using rule 11 (declara_vars -> vars declara_vars .)
    RIGHT           reduce using rule 11 (declara_vars -> vars declara_vars .)
    BACK            reduce using rule 11 (declara_vars -> vars declara_vars .)
    WHILE           reduce using rule 11 (declara_vars -> vars declara_vars .)
    RCURBRA         reduce using rule 11 (declara_vars -> vars declara_vars .)
    RETURN          reduce using rule 11 (declara_vars -> vars declara_vars .)


state 19

    (13) vars -> type ID . dimensionada equals exp SEMICOLON
    (14) vars -> type ID . dimensionada SEMICOLON
    (15) dimensionada -> . LBRACK CTE_INT RBRACK
    (16) dimensionada -> . LBRACK CTE_INT RBRACK LBRACK CTE_INT RBRACK
    (17) dimensionada -> . empty
    (164) empty -> .

    LBRACK          shift and go to state 31
    SEMICOLON       reduce using rule 164 (empty -> .)
    EQUAL           reduce using rule 164 (empty -> .)

    dimensionada                   shift and go to state 30
    empty                          shift and go to state 32

state 20

    (1) program -> PROGRAM ID SEMICOLON declara_vars program_fun mainF .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON declara_vars program_fun mainF .)


state 21

    (6) mainF -> mainFI . declara_vars mainF1 RCURBRA
    (11) declara_vars -> . vars declara_vars
    (12) declara_vars -> . empty
    (13) vars -> . type ID dimensionada equals exp SEMICOLON
    (14) vars -> . type ID dimensionada SEMICOLON
    (164) empty -> .
    (67) type -> . INT
    (68) type -> . FLOAT
    (69) type -> . STRING

    IF              reduce using rule 164 (empty -> .)
    PRINT           reduce using rule 164 (empty -> .)
    READ            reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    FOR             reduce using rule 164 (empty -> .)
    CIRCLE          reduce using rule 164 (empty -> .)
    SQUARE          reduce using rule 164 (empty -> .)
    TRIANGLE        reduce using rule 164 (empty -> .)
    RECTANGLE       reduce using rule 164 (empty -> .)
    EXIT            reduce using rule 164 (empty -> .)
    START_F         reduce using rule 164 (empty -> .)
    END_F           reduce using rule 164 (empty -> .)
    POINTER_COLOR   reduce using rule 164 (empty -> .)
    POINTER_SIZE    reduce using rule 164 (empty -> .)
    SPEED           reduce using rule 164 (empty -> .)
    POSITION        reduce using rule 164 (empty -> .)
    DOWN            reduce using rule 164 (empty -> .)
    UP              reduce using rule 164 (empty -> .)
    GO              reduce using rule 164 (empty -> .)
    LEFT            reduce using rule 164 (empty -> .)
    RIGHT           reduce using rule 164 (empty -> .)
    BACK            reduce using rule 164 (empty -> .)
    WHILE           reduce using rule 164 (empty -> .)
    RCURBRA         reduce using rule 164 (empty -> .)
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11

    declara_vars                   shift and go to state 33
    vars                           shift and go to state 6
    empty                          shift and go to state 7
    type                           shift and go to state 8

state 22

    (7) mainFI -> mainF_sign . LCURBRA

    LCURBRA         shift and go to state 34


state 23

    (8) mainF_sign -> MAINF .

    LCURBRA         reduce using rule 8 (mainF_sign -> MAINF .)


state 24

    (3) funs -> function_t funs .

    MAINF           reduce using rule 3 (funs -> function_t funs .)


state 25

    (4) funs -> function_v funs .

    MAINF           reduce using rule 4 (funs -> function_v funs .)


state 26

    (53) function_t -> FUNCTION functionI . function2 inicia_fun declara_vars function4 termina_fun
    (57) function2 -> . LPARENT function3 RPARENT

    LPARENT         shift and go to state 36

    function2                      shift and go to state 35

state 27

    (54) function_v -> FUNCTION functionV . function2 inicia_fun declara_vars function9 termina_fun
    (57) function2 -> . LPARENT function3 RPARENT

    LPARENT         shift and go to state 36

    function2                      shift and go to state 37

state 28

    (51) functionI -> type . ID

    ID              shift and go to state 38


state 29

    (52) functionV -> VOID . ID

    ID              shift and go to state 39


state 30

    (13) vars -> type ID dimensionada . equals exp SEMICOLON
    (14) vars -> type ID dimensionada . SEMICOLON
    (75) equals -> . EQUAL

    SEMICOLON       shift and go to state 41
    EQUAL           shift and go to state 42

    equals                         shift and go to state 40

state 31

    (15) dimensionada -> LBRACK . CTE_INT RBRACK
    (16) dimensionada -> LBRACK . CTE_INT RBRACK LBRACK CTE_INT RBRACK

    CTE_INT         shift and go to state 43


state 32

    (17) dimensionada -> empty .

    SEMICOLON       reduce using rule 17 (dimensionada -> empty .)
    EQUAL           reduce using rule 17 (dimensionada -> empty .)


state 33

    (6) mainF -> mainFI declara_vars . mainF1 RCURBRA
    (9) mainF1 -> . stmt_v mainF1
    (10) mainF1 -> . empty
    (28) stmt_v -> . assignment
    (29) stmt_v -> . condition
    (30) stmt_v -> . print
    (31) stmt_v -> . loop
    (32) stmt_v -> . read
    (33) stmt_v -> . graphstmt
    (34) stmt_v -> . funCall SEMICOLON
    (164) empty -> .
    (35) assignment -> . id equals assignment3 SEMICOLON
    (101) condition -> . IF head_cond body condition1
    (70) print -> . PRINT LPARENT expression RPARENT SEMICOLON
    (18) loop -> . while
    (19) loop -> . for_v2
    (71) read -> . READ LPARENT id read1 RPARENT SEMICOLON
    (121) graphstmt -> . graphfig
    (122) graphstmt -> . graphview
    (123) graphstmt -> . graphmove
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (80) id -> . aidi indice_dimensionada
    (116) while -> . while1 body
    (112) for_v2 -> . nuevo_for forBody
    (124) graphfig -> . graphfig1 SEMICOLON
    (125) graphfig -> . graphfig2 SEMICOLON
    (138) graphview -> . graphview0 SEMICOLON
    (139) graphview -> . graphview1 SEMICOLON
    (140) graphview -> . graphview2 SEMICOLON
    (130) graphmove -> . graphmove0 SEMICOLON
    (131) graphmove -> . graphmove1 SEMICOLON
    (79) aidi -> . ID
    (117) while1 -> . while_w LPARENT expression RPARENT
    (113) nuevo_for -> . FOR LPARENT id COLON for2 RPARENT
    (126) graphfig1 -> . CIRCLE unaExp
    (127) graphfig1 -> . SQUARE unaExp
    (128) graphfig1 -> . TRIANGLE unaExp
    (129) graphfig2 -> . RECTANGLE dosExp
    (141) graphview0 -> . EXIT
    (142) graphview0 -> . START_F
    (143) graphview0 -> . END_F
    (144) graphview1 -> . POINTER_COLOR unaExp
    (145) graphview1 -> . POINTER_SIZE unaExp
    (146) graphview1 -> . SPEED unaExp
    (147) graphview2 -> . POSITION dosExp
    (132) graphmove0 -> . DOWN
    (133) graphmove0 -> . UP
    (134) graphmove1 -> . GO unaExp
    (135) graphmove1 -> . LEFT unaExp
    (136) graphmove1 -> . RIGHT unaExp
    (137) graphmove1 -> . BACK unaExp
    (118) while_w -> . WHILE

    RCURBRA         reduce using rule 164 (empty -> .)
    IF              shift and go to state 55
    PRINT           shift and go to state 56
    READ            shift and go to state 59
    ID              shift and go to state 63
    FOR             shift and go to state 75
    CIRCLE          shift and go to state 76
    SQUARE          shift and go to state 77
    TRIANGLE        shift and go to state 78
    RECTANGLE       shift and go to state 79
    EXIT            shift and go to state 80
    START_F         shift and go to state 81
    END_F           shift and go to state 82
    POINTER_COLOR   shift and go to state 83
    POINTER_SIZE    shift and go to state 84
    SPEED           shift and go to state 85
    POSITION        shift and go to state 86
    DOWN            shift and go to state 87
    UP              shift and go to state 88
    GO              shift and go to state 89
    LEFT            shift and go to state 90
    RIGHT           shift and go to state 91
    BACK            shift and go to state 92
    WHILE           shift and go to state 93

    mainF1                         shift and go to state 44
    stmt_v                         shift and go to state 45
    empty                          shift and go to state 46
    assignment                     shift and go to state 47
    condition                      shift and go to state 48
    print                          shift and go to state 49
    loop                           shift and go to state 50
    read                           shift and go to state 51
    graphstmt                      shift and go to state 52
    funCall                        shift and go to state 53
    id                             shift and go to state 54
    while                          shift and go to state 57
    for_v2                         shift and go to state 58
    graphfig                       shift and go to state 60
    graphview                      shift and go to state 61
    graphmove                      shift and go to state 62
    aidi                           shift and go to state 64
    while1                         shift and go to state 65
    nuevo_for                      shift and go to state 66
    graphfig1                      shift and go to state 67
    graphfig2                      shift and go to state 68
    graphview0                     shift and go to state 69
    graphview1                     shift and go to state 70
    graphview2                     shift and go to state 71
    graphmove0                     shift and go to state 72
    graphmove1                     shift and go to state 73
    while_w                        shift and go to state 74

state 34

    (7) mainFI -> mainF_sign LCURBRA .

    INT             reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    FLOAT           reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    STRING          reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    IF              reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    PRINT           reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    READ            reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    ID              reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    FOR             reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    CIRCLE          reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    SQUARE          reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    TRIANGLE        reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    RECTANGLE       reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    EXIT            reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    START_F         reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    END_F           reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    POINTER_COLOR   reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    POINTER_SIZE    reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    SPEED           reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    POSITION        reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    DOWN            reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    UP              reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    GO              reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    LEFT            reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    RIGHT           reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    BACK            reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    WHILE           reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)
    RCURBRA         reduce using rule 7 (mainFI -> mainF_sign LCURBRA .)


state 35

    (53) function_t -> FUNCTION functionI function2 . inicia_fun declara_vars function4 termina_fun
    (55) inicia_fun -> . LCURBRA

    LCURBRA         shift and go to state 95

    inicia_fun                     shift and go to state 94

state 36

    (57) function2 -> LPARENT . function3 RPARENT
    (58) function3 -> . funParam function5
    (59) function3 -> . empty
    (66) funParam -> . type ID
    (164) empty -> .
    (67) type -> . INT
    (68) type -> . FLOAT
    (69) type -> . STRING

    RPARENT         reduce using rule 164 (empty -> .)
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11

    function3                      shift and go to state 96
    funParam                       shift and go to state 97
    empty                          shift and go to state 98
    type                           shift and go to state 99

state 37

    (54) function_v -> FUNCTION functionV function2 . inicia_fun declara_vars function9 termina_fun
    (55) inicia_fun -> . LCURBRA

    LCURBRA         shift and go to state 95

    inicia_fun                     shift and go to state 100

state 38

    (51) functionI -> type ID .

    LPARENT         reduce using rule 51 (functionI -> type ID .)


state 39

    (52) functionV -> VOID ID .

    LPARENT         reduce using rule 52 (functionV -> VOID ID .)


state 40

    (13) vars -> type ID dimensionada equals . exp SEMICOLON
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    exp                            shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 41

    (14) vars -> type ID dimensionada SEMICOLON .

    INT             reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    FLOAT           reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    STRING          reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    FUNCTION        reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    MAINF           reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    IF              reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    PRINT           reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    READ            reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    ID              reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    FOR             reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    CIRCLE          reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    SQUARE          reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    TRIANGLE        reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    RECTANGLE       reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    EXIT            reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    START_F         reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    END_F           reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    POINTER_COLOR   reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    POINTER_SIZE    reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    SPEED           reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    POSITION        reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    DOWN            reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    UP              reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    GO              reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    LEFT            reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    RIGHT           reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    BACK            reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    WHILE           reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    RCURBRA         reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)
    RETURN          reduce using rule 14 (vars -> type ID dimensionada SEMICOLON .)


state 42

    (75) equals -> EQUAL .

    LPARENT         reduce using rule 75 (equals -> EQUAL .)
    CTE_STRING      reduce using rule 75 (equals -> EQUAL .)
    ID              reduce using rule 75 (equals -> EQUAL .)
    LBRACK          reduce using rule 75 (equals -> EQUAL .)
    MINUS           reduce using rule 75 (equals -> EQUAL .)
    CTE_INT         reduce using rule 75 (equals -> EQUAL .)
    CTE_FLOAT       reduce using rule 75 (equals -> EQUAL .)
    READ            reduce using rule 75 (equals -> EQUAL .)


state 43

    (15) dimensionada -> LBRACK CTE_INT . RBRACK
    (16) dimensionada -> LBRACK CTE_INT . RBRACK LBRACK CTE_INT RBRACK

    RBRACK          shift and go to state 119


state 44

    (6) mainF -> mainFI declara_vars mainF1 . RCURBRA

    RCURBRA         shift and go to state 120


state 45

    (9) mainF1 -> stmt_v . mainF1
    (9) mainF1 -> . stmt_v mainF1
    (10) mainF1 -> . empty
    (28) stmt_v -> . assignment
    (29) stmt_v -> . condition
    (30) stmt_v -> . print
    (31) stmt_v -> . loop
    (32) stmt_v -> . read
    (33) stmt_v -> . graphstmt
    (34) stmt_v -> . funCall SEMICOLON
    (164) empty -> .
    (35) assignment -> . id equals assignment3 SEMICOLON
    (101) condition -> . IF head_cond body condition1
    (70) print -> . PRINT LPARENT expression RPARENT SEMICOLON
    (18) loop -> . while
    (19) loop -> . for_v2
    (71) read -> . READ LPARENT id read1 RPARENT SEMICOLON
    (121) graphstmt -> . graphfig
    (122) graphstmt -> . graphview
    (123) graphstmt -> . graphmove
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (80) id -> . aidi indice_dimensionada
    (116) while -> . while1 body
    (112) for_v2 -> . nuevo_for forBody
    (124) graphfig -> . graphfig1 SEMICOLON
    (125) graphfig -> . graphfig2 SEMICOLON
    (138) graphview -> . graphview0 SEMICOLON
    (139) graphview -> . graphview1 SEMICOLON
    (140) graphview -> . graphview2 SEMICOLON
    (130) graphmove -> . graphmove0 SEMICOLON
    (131) graphmove -> . graphmove1 SEMICOLON
    (79) aidi -> . ID
    (117) while1 -> . while_w LPARENT expression RPARENT
    (113) nuevo_for -> . FOR LPARENT id COLON for2 RPARENT
    (126) graphfig1 -> . CIRCLE unaExp
    (127) graphfig1 -> . SQUARE unaExp
    (128) graphfig1 -> . TRIANGLE unaExp
    (129) graphfig2 -> . RECTANGLE dosExp
    (141) graphview0 -> . EXIT
    (142) graphview0 -> . START_F
    (143) graphview0 -> . END_F
    (144) graphview1 -> . POINTER_COLOR unaExp
    (145) graphview1 -> . POINTER_SIZE unaExp
    (146) graphview1 -> . SPEED unaExp
    (147) graphview2 -> . POSITION dosExp
    (132) graphmove0 -> . DOWN
    (133) graphmove0 -> . UP
    (134) graphmove1 -> . GO unaExp
    (135) graphmove1 -> . LEFT unaExp
    (136) graphmove1 -> . RIGHT unaExp
    (137) graphmove1 -> . BACK unaExp
    (118) while_w -> . WHILE

    RCURBRA         reduce using rule 164 (empty -> .)
    IF              shift and go to state 55
    PRINT           shift and go to state 56
    READ            shift and go to state 59
    ID              shift and go to state 63
    FOR             shift and go to state 75
    CIRCLE          shift and go to state 76
    SQUARE          shift and go to state 77
    TRIANGLE        shift and go to state 78
    RECTANGLE       shift and go to state 79
    EXIT            shift and go to state 80
    START_F         shift and go to state 81
    END_F           shift and go to state 82
    POINTER_COLOR   shift and go to state 83
    POINTER_SIZE    shift and go to state 84
    SPEED           shift and go to state 85
    POSITION        shift and go to state 86
    DOWN            shift and go to state 87
    UP              shift and go to state 88
    GO              shift and go to state 89
    LEFT            shift and go to state 90
    RIGHT           shift and go to state 91
    BACK            shift and go to state 92
    WHILE           shift and go to state 93

    stmt_v                         shift and go to state 45
    mainF1                         shift and go to state 121
    empty                          shift and go to state 46
    assignment                     shift and go to state 47
    condition                      shift and go to state 48
    print                          shift and go to state 49
    loop                           shift and go to state 50
    read                           shift and go to state 51
    graphstmt                      shift and go to state 52
    funCall                        shift and go to state 53
    id                             shift and go to state 54
    while                          shift and go to state 57
    for_v2                         shift and go to state 58
    graphfig                       shift and go to state 60
    graphview                      shift and go to state 61
    graphmove                      shift and go to state 62
    aidi                           shift and go to state 64
    while1                         shift and go to state 65
    nuevo_for                      shift and go to state 66
    graphfig1                      shift and go to state 67
    graphfig2                      shift and go to state 68
    graphview0                     shift and go to state 69
    graphview1                     shift and go to state 70
    graphview2                     shift and go to state 71
    graphmove0                     shift and go to state 72
    graphmove1                     shift and go to state 73
    while_w                        shift and go to state 74

state 46

    (10) mainF1 -> empty .

    RCURBRA         reduce using rule 10 (mainF1 -> empty .)


state 47

    (28) stmt_v -> assignment .

    IF              reduce using rule 28 (stmt_v -> assignment .)
    PRINT           reduce using rule 28 (stmt_v -> assignment .)
    READ            reduce using rule 28 (stmt_v -> assignment .)
    ID              reduce using rule 28 (stmt_v -> assignment .)
    FOR             reduce using rule 28 (stmt_v -> assignment .)
    CIRCLE          reduce using rule 28 (stmt_v -> assignment .)
    SQUARE          reduce using rule 28 (stmt_v -> assignment .)
    TRIANGLE        reduce using rule 28 (stmt_v -> assignment .)
    RECTANGLE       reduce using rule 28 (stmt_v -> assignment .)
    EXIT            reduce using rule 28 (stmt_v -> assignment .)
    START_F         reduce using rule 28 (stmt_v -> assignment .)
    END_F           reduce using rule 28 (stmt_v -> assignment .)
    POINTER_COLOR   reduce using rule 28 (stmt_v -> assignment .)
    POINTER_SIZE    reduce using rule 28 (stmt_v -> assignment .)
    SPEED           reduce using rule 28 (stmt_v -> assignment .)
    POSITION        reduce using rule 28 (stmt_v -> assignment .)
    DOWN            reduce using rule 28 (stmt_v -> assignment .)
    UP              reduce using rule 28 (stmt_v -> assignment .)
    GO              reduce using rule 28 (stmt_v -> assignment .)
    LEFT            reduce using rule 28 (stmt_v -> assignment .)
    RIGHT           reduce using rule 28 (stmt_v -> assignment .)
    BACK            reduce using rule 28 (stmt_v -> assignment .)
    WHILE           reduce using rule 28 (stmt_v -> assignment .)
    RCURBRA         reduce using rule 28 (stmt_v -> assignment .)


state 48

    (29) stmt_v -> condition .

    IF              reduce using rule 29 (stmt_v -> condition .)
    PRINT           reduce using rule 29 (stmt_v -> condition .)
    READ            reduce using rule 29 (stmt_v -> condition .)
    ID              reduce using rule 29 (stmt_v -> condition .)
    FOR             reduce using rule 29 (stmt_v -> condition .)
    CIRCLE          reduce using rule 29 (stmt_v -> condition .)
    SQUARE          reduce using rule 29 (stmt_v -> condition .)
    TRIANGLE        reduce using rule 29 (stmt_v -> condition .)
    RECTANGLE       reduce using rule 29 (stmt_v -> condition .)
    EXIT            reduce using rule 29 (stmt_v -> condition .)
    START_F         reduce using rule 29 (stmt_v -> condition .)
    END_F           reduce using rule 29 (stmt_v -> condition .)
    POINTER_COLOR   reduce using rule 29 (stmt_v -> condition .)
    POINTER_SIZE    reduce using rule 29 (stmt_v -> condition .)
    SPEED           reduce using rule 29 (stmt_v -> condition .)
    POSITION        reduce using rule 29 (stmt_v -> condition .)
    DOWN            reduce using rule 29 (stmt_v -> condition .)
    UP              reduce using rule 29 (stmt_v -> condition .)
    GO              reduce using rule 29 (stmt_v -> condition .)
    LEFT            reduce using rule 29 (stmt_v -> condition .)
    RIGHT           reduce using rule 29 (stmt_v -> condition .)
    BACK            reduce using rule 29 (stmt_v -> condition .)
    WHILE           reduce using rule 29 (stmt_v -> condition .)
    RCURBRA         reduce using rule 29 (stmt_v -> condition .)


state 49

    (30) stmt_v -> print .

    IF              reduce using rule 30 (stmt_v -> print .)
    PRINT           reduce using rule 30 (stmt_v -> print .)
    READ            reduce using rule 30 (stmt_v -> print .)
    ID              reduce using rule 30 (stmt_v -> print .)
    FOR             reduce using rule 30 (stmt_v -> print .)
    CIRCLE          reduce using rule 30 (stmt_v -> print .)
    SQUARE          reduce using rule 30 (stmt_v -> print .)
    TRIANGLE        reduce using rule 30 (stmt_v -> print .)
    RECTANGLE       reduce using rule 30 (stmt_v -> print .)
    EXIT            reduce using rule 30 (stmt_v -> print .)
    START_F         reduce using rule 30 (stmt_v -> print .)
    END_F           reduce using rule 30 (stmt_v -> print .)
    POINTER_COLOR   reduce using rule 30 (stmt_v -> print .)
    POINTER_SIZE    reduce using rule 30 (stmt_v -> print .)
    SPEED           reduce using rule 30 (stmt_v -> print .)
    POSITION        reduce using rule 30 (stmt_v -> print .)
    DOWN            reduce using rule 30 (stmt_v -> print .)
    UP              reduce using rule 30 (stmt_v -> print .)
    GO              reduce using rule 30 (stmt_v -> print .)
    LEFT            reduce using rule 30 (stmt_v -> print .)
    RIGHT           reduce using rule 30 (stmt_v -> print .)
    BACK            reduce using rule 30 (stmt_v -> print .)
    WHILE           reduce using rule 30 (stmt_v -> print .)
    RCURBRA         reduce using rule 30 (stmt_v -> print .)


state 50

    (31) stmt_v -> loop .

    IF              reduce using rule 31 (stmt_v -> loop .)
    PRINT           reduce using rule 31 (stmt_v -> loop .)
    READ            reduce using rule 31 (stmt_v -> loop .)
    ID              reduce using rule 31 (stmt_v -> loop .)
    FOR             reduce using rule 31 (stmt_v -> loop .)
    CIRCLE          reduce using rule 31 (stmt_v -> loop .)
    SQUARE          reduce using rule 31 (stmt_v -> loop .)
    TRIANGLE        reduce using rule 31 (stmt_v -> loop .)
    RECTANGLE       reduce using rule 31 (stmt_v -> loop .)
    EXIT            reduce using rule 31 (stmt_v -> loop .)
    START_F         reduce using rule 31 (stmt_v -> loop .)
    END_F           reduce using rule 31 (stmt_v -> loop .)
    POINTER_COLOR   reduce using rule 31 (stmt_v -> loop .)
    POINTER_SIZE    reduce using rule 31 (stmt_v -> loop .)
    SPEED           reduce using rule 31 (stmt_v -> loop .)
    POSITION        reduce using rule 31 (stmt_v -> loop .)
    DOWN            reduce using rule 31 (stmt_v -> loop .)
    UP              reduce using rule 31 (stmt_v -> loop .)
    GO              reduce using rule 31 (stmt_v -> loop .)
    LEFT            reduce using rule 31 (stmt_v -> loop .)
    RIGHT           reduce using rule 31 (stmt_v -> loop .)
    BACK            reduce using rule 31 (stmt_v -> loop .)
    WHILE           reduce using rule 31 (stmt_v -> loop .)
    RCURBRA         reduce using rule 31 (stmt_v -> loop .)


state 51

    (32) stmt_v -> read .

    IF              reduce using rule 32 (stmt_v -> read .)
    PRINT           reduce using rule 32 (stmt_v -> read .)
    READ            reduce using rule 32 (stmt_v -> read .)
    ID              reduce using rule 32 (stmt_v -> read .)
    FOR             reduce using rule 32 (stmt_v -> read .)
    CIRCLE          reduce using rule 32 (stmt_v -> read .)
    SQUARE          reduce using rule 32 (stmt_v -> read .)
    TRIANGLE        reduce using rule 32 (stmt_v -> read .)
    RECTANGLE       reduce using rule 32 (stmt_v -> read .)
    EXIT            reduce using rule 32 (stmt_v -> read .)
    START_F         reduce using rule 32 (stmt_v -> read .)
    END_F           reduce using rule 32 (stmt_v -> read .)
    POINTER_COLOR   reduce using rule 32 (stmt_v -> read .)
    POINTER_SIZE    reduce using rule 32 (stmt_v -> read .)
    SPEED           reduce using rule 32 (stmt_v -> read .)
    POSITION        reduce using rule 32 (stmt_v -> read .)
    DOWN            reduce using rule 32 (stmt_v -> read .)
    UP              reduce using rule 32 (stmt_v -> read .)
    GO              reduce using rule 32 (stmt_v -> read .)
    LEFT            reduce using rule 32 (stmt_v -> read .)
    RIGHT           reduce using rule 32 (stmt_v -> read .)
    BACK            reduce using rule 32 (stmt_v -> read .)
    WHILE           reduce using rule 32 (stmt_v -> read .)
    RCURBRA         reduce using rule 32 (stmt_v -> read .)


state 52

    (33) stmt_v -> graphstmt .

    IF              reduce using rule 33 (stmt_v -> graphstmt .)
    PRINT           reduce using rule 33 (stmt_v -> graphstmt .)
    READ            reduce using rule 33 (stmt_v -> graphstmt .)
    ID              reduce using rule 33 (stmt_v -> graphstmt .)
    FOR             reduce using rule 33 (stmt_v -> graphstmt .)
    CIRCLE          reduce using rule 33 (stmt_v -> graphstmt .)
    SQUARE          reduce using rule 33 (stmt_v -> graphstmt .)
    TRIANGLE        reduce using rule 33 (stmt_v -> graphstmt .)
    RECTANGLE       reduce using rule 33 (stmt_v -> graphstmt .)
    EXIT            reduce using rule 33 (stmt_v -> graphstmt .)
    START_F         reduce using rule 33 (stmt_v -> graphstmt .)
    END_F           reduce using rule 33 (stmt_v -> graphstmt .)
    POINTER_COLOR   reduce using rule 33 (stmt_v -> graphstmt .)
    POINTER_SIZE    reduce using rule 33 (stmt_v -> graphstmt .)
    SPEED           reduce using rule 33 (stmt_v -> graphstmt .)
    POSITION        reduce using rule 33 (stmt_v -> graphstmt .)
    DOWN            reduce using rule 33 (stmt_v -> graphstmt .)
    UP              reduce using rule 33 (stmt_v -> graphstmt .)
    GO              reduce using rule 33 (stmt_v -> graphstmt .)
    LEFT            reduce using rule 33 (stmt_v -> graphstmt .)
    RIGHT           reduce using rule 33 (stmt_v -> graphstmt .)
    BACK            reduce using rule 33 (stmt_v -> graphstmt .)
    WHILE           reduce using rule 33 (stmt_v -> graphstmt .)
    RCURBRA         reduce using rule 33 (stmt_v -> graphstmt .)


state 53

    (34) stmt_v -> funCall . SEMICOLON

    SEMICOLON       shift and go to state 122


state 54

    (35) assignment -> id . equals assignment3 SEMICOLON
    (75) equals -> . EQUAL

    EQUAL           shift and go to state 42

    equals                         shift and go to state 123

state 55

    (101) condition -> IF . head_cond body condition1
    (107) head_cond -> . LPARENT expression close_condition

    LPARENT         shift and go to state 125

    head_cond                      shift and go to state 124

state 56

    (70) print -> PRINT . LPARENT expression RPARENT SEMICOLON

    LPARENT         shift and go to state 126


state 57

    (18) loop -> while .

    IF              reduce using rule 18 (loop -> while .)
    PRINT           reduce using rule 18 (loop -> while .)
    READ            reduce using rule 18 (loop -> while .)
    ID              reduce using rule 18 (loop -> while .)
    FOR             reduce using rule 18 (loop -> while .)
    CIRCLE          reduce using rule 18 (loop -> while .)
    SQUARE          reduce using rule 18 (loop -> while .)
    TRIANGLE        reduce using rule 18 (loop -> while .)
    RECTANGLE       reduce using rule 18 (loop -> while .)
    EXIT            reduce using rule 18 (loop -> while .)
    START_F         reduce using rule 18 (loop -> while .)
    END_F           reduce using rule 18 (loop -> while .)
    POINTER_COLOR   reduce using rule 18 (loop -> while .)
    POINTER_SIZE    reduce using rule 18 (loop -> while .)
    SPEED           reduce using rule 18 (loop -> while .)
    POSITION        reduce using rule 18 (loop -> while .)
    DOWN            reduce using rule 18 (loop -> while .)
    UP              reduce using rule 18 (loop -> while .)
    GO              reduce using rule 18 (loop -> while .)
    LEFT            reduce using rule 18 (loop -> while .)
    RIGHT           reduce using rule 18 (loop -> while .)
    BACK            reduce using rule 18 (loop -> while .)
    WHILE           reduce using rule 18 (loop -> while .)
    RCURBRA         reduce using rule 18 (loop -> while .)
    RETURN          reduce using rule 18 (loop -> while .)


state 58

    (19) loop -> for_v2 .

    IF              reduce using rule 19 (loop -> for_v2 .)
    PRINT           reduce using rule 19 (loop -> for_v2 .)
    READ            reduce using rule 19 (loop -> for_v2 .)
    ID              reduce using rule 19 (loop -> for_v2 .)
    FOR             reduce using rule 19 (loop -> for_v2 .)
    CIRCLE          reduce using rule 19 (loop -> for_v2 .)
    SQUARE          reduce using rule 19 (loop -> for_v2 .)
    TRIANGLE        reduce using rule 19 (loop -> for_v2 .)
    RECTANGLE       reduce using rule 19 (loop -> for_v2 .)
    EXIT            reduce using rule 19 (loop -> for_v2 .)
    START_F         reduce using rule 19 (loop -> for_v2 .)
    END_F           reduce using rule 19 (loop -> for_v2 .)
    POINTER_COLOR   reduce using rule 19 (loop -> for_v2 .)
    POINTER_SIZE    reduce using rule 19 (loop -> for_v2 .)
    SPEED           reduce using rule 19 (loop -> for_v2 .)
    POSITION        reduce using rule 19 (loop -> for_v2 .)
    DOWN            reduce using rule 19 (loop -> for_v2 .)
    UP              reduce using rule 19 (loop -> for_v2 .)
    GO              reduce using rule 19 (loop -> for_v2 .)
    LEFT            reduce using rule 19 (loop -> for_v2 .)
    RIGHT           reduce using rule 19 (loop -> for_v2 .)
    BACK            reduce using rule 19 (loop -> for_v2 .)
    WHILE           reduce using rule 19 (loop -> for_v2 .)
    RCURBRA         reduce using rule 19 (loop -> for_v2 .)
    RETURN          reduce using rule 19 (loop -> for_v2 .)


state 59

    (71) read -> READ . LPARENT id read1 RPARENT SEMICOLON

    LPARENT         shift and go to state 127


state 60

    (121) graphstmt -> graphfig .

    IF              reduce using rule 121 (graphstmt -> graphfig .)
    PRINT           reduce using rule 121 (graphstmt -> graphfig .)
    READ            reduce using rule 121 (graphstmt -> graphfig .)
    ID              reduce using rule 121 (graphstmt -> graphfig .)
    FOR             reduce using rule 121 (graphstmt -> graphfig .)
    CIRCLE          reduce using rule 121 (graphstmt -> graphfig .)
    SQUARE          reduce using rule 121 (graphstmt -> graphfig .)
    TRIANGLE        reduce using rule 121 (graphstmt -> graphfig .)
    RECTANGLE       reduce using rule 121 (graphstmt -> graphfig .)
    EXIT            reduce using rule 121 (graphstmt -> graphfig .)
    START_F         reduce using rule 121 (graphstmt -> graphfig .)
    END_F           reduce using rule 121 (graphstmt -> graphfig .)
    POINTER_COLOR   reduce using rule 121 (graphstmt -> graphfig .)
    POINTER_SIZE    reduce using rule 121 (graphstmt -> graphfig .)
    SPEED           reduce using rule 121 (graphstmt -> graphfig .)
    POSITION        reduce using rule 121 (graphstmt -> graphfig .)
    DOWN            reduce using rule 121 (graphstmt -> graphfig .)
    UP              reduce using rule 121 (graphstmt -> graphfig .)
    GO              reduce using rule 121 (graphstmt -> graphfig .)
    LEFT            reduce using rule 121 (graphstmt -> graphfig .)
    RIGHT           reduce using rule 121 (graphstmt -> graphfig .)
    BACK            reduce using rule 121 (graphstmt -> graphfig .)
    WHILE           reduce using rule 121 (graphstmt -> graphfig .)
    RCURBRA         reduce using rule 121 (graphstmt -> graphfig .)
    RETURN          reduce using rule 121 (graphstmt -> graphfig .)


state 61

    (122) graphstmt -> graphview .

    IF              reduce using rule 122 (graphstmt -> graphview .)
    PRINT           reduce using rule 122 (graphstmt -> graphview .)
    READ            reduce using rule 122 (graphstmt -> graphview .)
    ID              reduce using rule 122 (graphstmt -> graphview .)
    FOR             reduce using rule 122 (graphstmt -> graphview .)
    CIRCLE          reduce using rule 122 (graphstmt -> graphview .)
    SQUARE          reduce using rule 122 (graphstmt -> graphview .)
    TRIANGLE        reduce using rule 122 (graphstmt -> graphview .)
    RECTANGLE       reduce using rule 122 (graphstmt -> graphview .)
    EXIT            reduce using rule 122 (graphstmt -> graphview .)
    START_F         reduce using rule 122 (graphstmt -> graphview .)
    END_F           reduce using rule 122 (graphstmt -> graphview .)
    POINTER_COLOR   reduce using rule 122 (graphstmt -> graphview .)
    POINTER_SIZE    reduce using rule 122 (graphstmt -> graphview .)
    SPEED           reduce using rule 122 (graphstmt -> graphview .)
    POSITION        reduce using rule 122 (graphstmt -> graphview .)
    DOWN            reduce using rule 122 (graphstmt -> graphview .)
    UP              reduce using rule 122 (graphstmt -> graphview .)
    GO              reduce using rule 122 (graphstmt -> graphview .)
    LEFT            reduce using rule 122 (graphstmt -> graphview .)
    RIGHT           reduce using rule 122 (graphstmt -> graphview .)
    BACK            reduce using rule 122 (graphstmt -> graphview .)
    WHILE           reduce using rule 122 (graphstmt -> graphview .)
    RCURBRA         reduce using rule 122 (graphstmt -> graphview .)
    RETURN          reduce using rule 122 (graphstmt -> graphview .)


state 62

    (123) graphstmt -> graphmove .

    IF              reduce using rule 123 (graphstmt -> graphmove .)
    PRINT           reduce using rule 123 (graphstmt -> graphmove .)
    READ            reduce using rule 123 (graphstmt -> graphmove .)
    ID              reduce using rule 123 (graphstmt -> graphmove .)
    FOR             reduce using rule 123 (graphstmt -> graphmove .)
    CIRCLE          reduce using rule 123 (graphstmt -> graphmove .)
    SQUARE          reduce using rule 123 (graphstmt -> graphmove .)
    TRIANGLE        reduce using rule 123 (graphstmt -> graphmove .)
    RECTANGLE       reduce using rule 123 (graphstmt -> graphmove .)
    EXIT            reduce using rule 123 (graphstmt -> graphmove .)
    START_F         reduce using rule 123 (graphstmt -> graphmove .)
    END_F           reduce using rule 123 (graphstmt -> graphmove .)
    POINTER_COLOR   reduce using rule 123 (graphstmt -> graphmove .)
    POINTER_SIZE    reduce using rule 123 (graphstmt -> graphmove .)
    SPEED           reduce using rule 123 (graphstmt -> graphmove .)
    POSITION        reduce using rule 123 (graphstmt -> graphmove .)
    DOWN            reduce using rule 123 (graphstmt -> graphmove .)
    UP              reduce using rule 123 (graphstmt -> graphmove .)
    GO              reduce using rule 123 (graphstmt -> graphmove .)
    LEFT            reduce using rule 123 (graphstmt -> graphmove .)
    RIGHT           reduce using rule 123 (graphstmt -> graphmove .)
    BACK            reduce using rule 123 (graphstmt -> graphmove .)
    WHILE           reduce using rule 123 (graphstmt -> graphmove .)
    RCURBRA         reduce using rule 123 (graphstmt -> graphmove .)
    RETURN          reduce using rule 123 (graphstmt -> graphmove .)


state 63

    (81) funCall -> ID . iniciaFunCall funCall2 terminaFunCall
    (79) aidi -> ID .
    (82) iniciaFunCall -> . LPARENT

    LBRACK          reduce using rule 79 (aidi -> ID .)
    EQUAL           reduce using rule 79 (aidi -> ID .)
    MULT            reduce using rule 79 (aidi -> ID .)
    DIVIDE          reduce using rule 79 (aidi -> ID .)
    PLUS            reduce using rule 79 (aidi -> ID .)
    MINUS           reduce using rule 79 (aidi -> ID .)
    SEMICOLON       reduce using rule 79 (aidi -> ID .)
    GREATERT        reduce using rule 79 (aidi -> ID .)
    MINORT          reduce using rule 79 (aidi -> ID .)
    GREATEREQT      reduce using rule 79 (aidi -> ID .)
    MINOREQT        reduce using rule 79 (aidi -> ID .)
    DIFFERENT       reduce using rule 79 (aidi -> ID .)
    ISEQUAL         reduce using rule 79 (aidi -> ID .)
    RPARENT         reduce using rule 79 (aidi -> ID .)
    COMMA           reduce using rule 79 (aidi -> ID .)
    RBRACK          reduce using rule 79 (aidi -> ID .)
    LPARENT         shift and go to state 129

    iniciaFunCall                  shift and go to state 128

state 64

    (80) id -> aidi . indice_dimensionada
    (76) indice_dimensionada -> . LBRACK exp RBRACK LBRACK exp RBRACK
    (77) indice_dimensionada -> . LBRACK exp RBRACK
    (78) indice_dimensionada -> . empty
    (164) empty -> .

  ! shift/reduce conflict for LBRACK resolved as shift
    LBRACK          shift and go to state 131
    EQUAL           reduce using rule 164 (empty -> .)
    MULT            reduce using rule 164 (empty -> .)
    DIVIDE          reduce using rule 164 (empty -> .)
    PLUS            reduce using rule 164 (empty -> .)
    MINUS           reduce using rule 164 (empty -> .)
    SEMICOLON       reduce using rule 164 (empty -> .)
    GREATERT        reduce using rule 164 (empty -> .)
    MINORT          reduce using rule 164 (empty -> .)
    GREATEREQT      reduce using rule 164 (empty -> .)
    MINOREQT        reduce using rule 164 (empty -> .)
    DIFFERENT       reduce using rule 164 (empty -> .)
    ISEQUAL         reduce using rule 164 (empty -> .)
    RPARENT         reduce using rule 164 (empty -> .)
    COMMA           reduce using rule 164 (empty -> .)
    RBRACK          reduce using rule 164 (empty -> .)
    COLON           reduce using rule 164 (empty -> .)

  ! LBRACK          [ reduce using rule 164 (empty -> .) ]

    indice_dimensionada            shift and go to state 130
    empty                          shift and go to state 132

state 65

    (116) while -> while1 . body
    (108) body -> . LCURBRA body1 RCURBRA

    LCURBRA         shift and go to state 134

    body                           shift and go to state 133

state 66

    (112) for_v2 -> nuevo_for . forBody
    (115) forBody -> . body
    (108) body -> . LCURBRA body1 RCURBRA

    LCURBRA         shift and go to state 134

    forBody                        shift and go to state 135
    body                           shift and go to state 136

state 67

    (124) graphfig -> graphfig1 . SEMICOLON

    SEMICOLON       shift and go to state 137


state 68

    (125) graphfig -> graphfig2 . SEMICOLON

    SEMICOLON       shift and go to state 138


state 69

    (138) graphview -> graphview0 . SEMICOLON

    SEMICOLON       shift and go to state 139


state 70

    (139) graphview -> graphview1 . SEMICOLON

    SEMICOLON       shift and go to state 140


state 71

    (140) graphview -> graphview2 . SEMICOLON

    SEMICOLON       shift and go to state 141


state 72

    (130) graphmove -> graphmove0 . SEMICOLON

    SEMICOLON       shift and go to state 142


state 73

    (131) graphmove -> graphmove1 . SEMICOLON

    SEMICOLON       shift and go to state 143


state 74

    (117) while1 -> while_w . LPARENT expression RPARENT

    LPARENT         shift and go to state 144


state 75

    (113) nuevo_for -> FOR . LPARENT id COLON for2 RPARENT

    LPARENT         shift and go to state 145


state 76

    (126) graphfig1 -> CIRCLE . unaExp
    (120) unaExp -> . LPARENT exp RPARENT

    LPARENT         shift and go to state 147

    unaExp                         shift and go to state 146

state 77

    (127) graphfig1 -> SQUARE . unaExp
    (120) unaExp -> . LPARENT exp RPARENT

    LPARENT         shift and go to state 147

    unaExp                         shift and go to state 148

state 78

    (128) graphfig1 -> TRIANGLE . unaExp
    (120) unaExp -> . LPARENT exp RPARENT

    LPARENT         shift and go to state 147

    unaExp                         shift and go to state 149

state 79

    (129) graphfig2 -> RECTANGLE . dosExp
    (119) dosExp -> . LPARENT exp COMMA exp RPARENT

    LPARENT         shift and go to state 151

    dosExp                         shift and go to state 150

state 80

    (141) graphview0 -> EXIT .

    SEMICOLON       reduce using rule 141 (graphview0 -> EXIT .)


state 81

    (142) graphview0 -> START_F .

    SEMICOLON       reduce using rule 142 (graphview0 -> START_F .)


state 82

    (143) graphview0 -> END_F .

    SEMICOLON       reduce using rule 143 (graphview0 -> END_F .)


state 83

    (144) graphview1 -> POINTER_COLOR . unaExp
    (120) unaExp -> . LPARENT exp RPARENT

    LPARENT         shift and go to state 147

    unaExp                         shift and go to state 152

state 84

    (145) graphview1 -> POINTER_SIZE . unaExp
    (120) unaExp -> . LPARENT exp RPARENT

    LPARENT         shift and go to state 147

    unaExp                         shift and go to state 153

state 85

    (146) graphview1 -> SPEED . unaExp
    (120) unaExp -> . LPARENT exp RPARENT

    LPARENT         shift and go to state 147

    unaExp                         shift and go to state 154

state 86

    (147) graphview2 -> POSITION . dosExp
    (119) dosExp -> . LPARENT exp COMMA exp RPARENT

    LPARENT         shift and go to state 151

    dosExp                         shift and go to state 155

state 87

    (132) graphmove0 -> DOWN .

    SEMICOLON       reduce using rule 132 (graphmove0 -> DOWN .)


state 88

    (133) graphmove0 -> UP .

    SEMICOLON       reduce using rule 133 (graphmove0 -> UP .)


state 89

    (134) graphmove1 -> GO . unaExp
    (120) unaExp -> . LPARENT exp RPARENT

    LPARENT         shift and go to state 147

    unaExp                         shift and go to state 156

state 90

    (135) graphmove1 -> LEFT . unaExp
    (120) unaExp -> . LPARENT exp RPARENT

    LPARENT         shift and go to state 147

    unaExp                         shift and go to state 157

state 91

    (136) graphmove1 -> RIGHT . unaExp
    (120) unaExp -> . LPARENT exp RPARENT

    LPARENT         shift and go to state 147

    unaExp                         shift and go to state 158

state 92

    (137) graphmove1 -> BACK . unaExp
    (120) unaExp -> . LPARENT exp RPARENT

    LPARENT         shift and go to state 147

    unaExp                         shift and go to state 159

state 93

    (118) while_w -> WHILE .

    LPARENT         reduce using rule 118 (while_w -> WHILE .)


state 94

    (53) function_t -> FUNCTION functionI function2 inicia_fun . declara_vars function4 termina_fun
    (11) declara_vars -> . vars declara_vars
    (12) declara_vars -> . empty
    (13) vars -> . type ID dimensionada equals exp SEMICOLON
    (14) vars -> . type ID dimensionada SEMICOLON
    (164) empty -> .
    (67) type -> . INT
    (68) type -> . FLOAT
    (69) type -> . STRING

    IF              reduce using rule 164 (empty -> .)
    PRINT           reduce using rule 164 (empty -> .)
    READ            reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    RETURN          reduce using rule 164 (empty -> .)
    FOR             reduce using rule 164 (empty -> .)
    CIRCLE          reduce using rule 164 (empty -> .)
    SQUARE          reduce using rule 164 (empty -> .)
    TRIANGLE        reduce using rule 164 (empty -> .)
    RECTANGLE       reduce using rule 164 (empty -> .)
    EXIT            reduce using rule 164 (empty -> .)
    START_F         reduce using rule 164 (empty -> .)
    END_F           reduce using rule 164 (empty -> .)
    POINTER_COLOR   reduce using rule 164 (empty -> .)
    POINTER_SIZE    reduce using rule 164 (empty -> .)
    SPEED           reduce using rule 164 (empty -> .)
    POSITION        reduce using rule 164 (empty -> .)
    DOWN            reduce using rule 164 (empty -> .)
    UP              reduce using rule 164 (empty -> .)
    GO              reduce using rule 164 (empty -> .)
    LEFT            reduce using rule 164 (empty -> .)
    RIGHT           reduce using rule 164 (empty -> .)
    BACK            reduce using rule 164 (empty -> .)
    WHILE           reduce using rule 164 (empty -> .)
    RCURBRA         reduce using rule 164 (empty -> .)
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11

    declara_vars                   shift and go to state 160
    vars                           shift and go to state 6
    empty                          shift and go to state 7
    type                           shift and go to state 8

state 95

    (55) inicia_fun -> LCURBRA .

    INT             reduce using rule 55 (inicia_fun -> LCURBRA .)
    FLOAT           reduce using rule 55 (inicia_fun -> LCURBRA .)
    STRING          reduce using rule 55 (inicia_fun -> LCURBRA .)
    IF              reduce using rule 55 (inicia_fun -> LCURBRA .)
    PRINT           reduce using rule 55 (inicia_fun -> LCURBRA .)
    READ            reduce using rule 55 (inicia_fun -> LCURBRA .)
    ID              reduce using rule 55 (inicia_fun -> LCURBRA .)
    RETURN          reduce using rule 55 (inicia_fun -> LCURBRA .)
    FOR             reduce using rule 55 (inicia_fun -> LCURBRA .)
    CIRCLE          reduce using rule 55 (inicia_fun -> LCURBRA .)
    SQUARE          reduce using rule 55 (inicia_fun -> LCURBRA .)
    TRIANGLE        reduce using rule 55 (inicia_fun -> LCURBRA .)
    RECTANGLE       reduce using rule 55 (inicia_fun -> LCURBRA .)
    EXIT            reduce using rule 55 (inicia_fun -> LCURBRA .)
    START_F         reduce using rule 55 (inicia_fun -> LCURBRA .)
    END_F           reduce using rule 55 (inicia_fun -> LCURBRA .)
    POINTER_COLOR   reduce using rule 55 (inicia_fun -> LCURBRA .)
    POINTER_SIZE    reduce using rule 55 (inicia_fun -> LCURBRA .)
    SPEED           reduce using rule 55 (inicia_fun -> LCURBRA .)
    POSITION        reduce using rule 55 (inicia_fun -> LCURBRA .)
    DOWN            reduce using rule 55 (inicia_fun -> LCURBRA .)
    UP              reduce using rule 55 (inicia_fun -> LCURBRA .)
    GO              reduce using rule 55 (inicia_fun -> LCURBRA .)
    LEFT            reduce using rule 55 (inicia_fun -> LCURBRA .)
    RIGHT           reduce using rule 55 (inicia_fun -> LCURBRA .)
    BACK            reduce using rule 55 (inicia_fun -> LCURBRA .)
    WHILE           reduce using rule 55 (inicia_fun -> LCURBRA .)
    RCURBRA         reduce using rule 55 (inicia_fun -> LCURBRA .)


state 96

    (57) function2 -> LPARENT function3 . RPARENT

    RPARENT         shift and go to state 161


state 97

    (58) function3 -> funParam . function5
    (64) function5 -> . COMMA funParam function5
    (65) function5 -> . empty
    (164) empty -> .

    COMMA           shift and go to state 163
    RPARENT         reduce using rule 164 (empty -> .)

    function5                      shift and go to state 162
    empty                          shift and go to state 164

state 98

    (59) function3 -> empty .

    RPARENT         reduce using rule 59 (function3 -> empty .)


state 99

    (66) funParam -> type . ID

    ID              shift and go to state 165


state 100

    (54) function_v -> FUNCTION functionV function2 inicia_fun . declara_vars function9 termina_fun
    (11) declara_vars -> . vars declara_vars
    (12) declara_vars -> . empty
    (13) vars -> . type ID dimensionada equals exp SEMICOLON
    (14) vars -> . type ID dimensionada SEMICOLON
    (164) empty -> .
    (67) type -> . INT
    (68) type -> . FLOAT
    (69) type -> . STRING

    IF              reduce using rule 164 (empty -> .)
    PRINT           reduce using rule 164 (empty -> .)
    READ            reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    FOR             reduce using rule 164 (empty -> .)
    CIRCLE          reduce using rule 164 (empty -> .)
    SQUARE          reduce using rule 164 (empty -> .)
    TRIANGLE        reduce using rule 164 (empty -> .)
    RECTANGLE       reduce using rule 164 (empty -> .)
    EXIT            reduce using rule 164 (empty -> .)
    START_F         reduce using rule 164 (empty -> .)
    END_F           reduce using rule 164 (empty -> .)
    POINTER_COLOR   reduce using rule 164 (empty -> .)
    POINTER_SIZE    reduce using rule 164 (empty -> .)
    SPEED           reduce using rule 164 (empty -> .)
    POSITION        reduce using rule 164 (empty -> .)
    DOWN            reduce using rule 164 (empty -> .)
    UP              reduce using rule 164 (empty -> .)
    GO              reduce using rule 164 (empty -> .)
    LEFT            reduce using rule 164 (empty -> .)
    RIGHT           reduce using rule 164 (empty -> .)
    BACK            reduce using rule 164 (empty -> .)
    WHILE           reduce using rule 164 (empty -> .)
    RCURBRA         reduce using rule 164 (empty -> .)
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11

    declara_vars                   shift and go to state 166
    vars                           shift and go to state 6
    empty                          shift and go to state 7
    type                           shift and go to state 8

state 101

    (13) vars -> type ID dimensionada equals exp . SEMICOLON

    SEMICOLON       shift and go to state 167


state 102

    (150) exp -> term .
    (151) exp -> term . exp_o exp
    (152) exp_o -> . PLUS
    (153) exp_o -> . MINUS

    SEMICOLON       reduce using rule 150 (exp -> term .)
    GREATERT        reduce using rule 150 (exp -> term .)
    MINORT          reduce using rule 150 (exp -> term .)
    GREATEREQT      reduce using rule 150 (exp -> term .)
    MINOREQT        reduce using rule 150 (exp -> term .)
    DIFFERENT       reduce using rule 150 (exp -> term .)
    ISEQUAL         reduce using rule 150 (exp -> term .)
    RPARENT         reduce using rule 150 (exp -> term .)
    COMMA           reduce using rule 150 (exp -> term .)
    RBRACK          reduce using rule 150 (exp -> term .)
    PLUS            shift and go to state 169
    MINUS           shift and go to state 170

    exp_o                          shift and go to state 168

state 103

    (156) term -> factor . term_o term
    (157) term -> factor .
    (158) term_o -> . MULT
    (159) term_o -> . DIVIDE

    PLUS            reduce using rule 157 (term -> factor .)
    MINUS           reduce using rule 157 (term -> factor .)
    SEMICOLON       reduce using rule 157 (term -> factor .)
    GREATERT        reduce using rule 157 (term -> factor .)
    MINORT          reduce using rule 157 (term -> factor .)
    GREATEREQT      reduce using rule 157 (term -> factor .)
    MINOREQT        reduce using rule 157 (term -> factor .)
    DIFFERENT       reduce using rule 157 (term -> factor .)
    ISEQUAL         reduce using rule 157 (term -> factor .)
    RPARENT         reduce using rule 157 (term -> factor .)
    COMMA           reduce using rule 157 (term -> factor .)
    RBRACK          reduce using rule 157 (term -> factor .)
    MULT            shift and go to state 172
    DIVIDE          shift and go to state 173

    term_o                         shift and go to state 171

state 104

    (160) factor -> vcte .

    MULT            reduce using rule 160 (factor -> vcte .)
    DIVIDE          reduce using rule 160 (factor -> vcte .)
    PLUS            reduce using rule 160 (factor -> vcte .)
    MINUS           reduce using rule 160 (factor -> vcte .)
    SEMICOLON       reduce using rule 160 (factor -> vcte .)
    GREATERT        reduce using rule 160 (factor -> vcte .)
    MINORT          reduce using rule 160 (factor -> vcte .)
    GREATEREQT      reduce using rule 160 (factor -> vcte .)
    MINOREQT        reduce using rule 160 (factor -> vcte .)
    DIFFERENT       reduce using rule 160 (factor -> vcte .)
    ISEQUAL         reduce using rule 160 (factor -> vcte .)
    RPARENT         reduce using rule 160 (factor -> vcte .)
    COMMA           reduce using rule 160 (factor -> vcte .)
    RBRACK          reduce using rule 160 (factor -> vcte .)


state 105

    (161) factor -> openP . expression closeP
    (148) expression -> . exp loper exp
    (149) expression -> . exp
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    openP                          shift and go to state 105
    expression                     shift and go to state 174
    exp                            shift and go to state 175
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 106

    (38) vcte -> cte_int .

    MULT            reduce using rule 38 (vcte -> cte_int .)
    DIVIDE          reduce using rule 38 (vcte -> cte_int .)
    PLUS            reduce using rule 38 (vcte -> cte_int .)
    MINUS           reduce using rule 38 (vcte -> cte_int .)
    SEMICOLON       reduce using rule 38 (vcte -> cte_int .)
    GREATERT        reduce using rule 38 (vcte -> cte_int .)
    MINORT          reduce using rule 38 (vcte -> cte_int .)
    GREATEREQT      reduce using rule 38 (vcte -> cte_int .)
    MINOREQT        reduce using rule 38 (vcte -> cte_int .)
    DIFFERENT       reduce using rule 38 (vcte -> cte_int .)
    ISEQUAL         reduce using rule 38 (vcte -> cte_int .)
    RPARENT         reduce using rule 38 (vcte -> cte_int .)
    COMMA           reduce using rule 38 (vcte -> cte_int .)
    RBRACK          reduce using rule 38 (vcte -> cte_int .)


state 107

    (39) vcte -> cte_float .

    MULT            reduce using rule 39 (vcte -> cte_float .)
    DIVIDE          reduce using rule 39 (vcte -> cte_float .)
    PLUS            reduce using rule 39 (vcte -> cte_float .)
    MINUS           reduce using rule 39 (vcte -> cte_float .)
    SEMICOLON       reduce using rule 39 (vcte -> cte_float .)
    GREATERT        reduce using rule 39 (vcte -> cte_float .)
    MINORT          reduce using rule 39 (vcte -> cte_float .)
    GREATEREQT      reduce using rule 39 (vcte -> cte_float .)
    MINOREQT        reduce using rule 39 (vcte -> cte_float .)
    DIFFERENT       reduce using rule 39 (vcte -> cte_float .)
    ISEQUAL         reduce using rule 39 (vcte -> cte_float .)
    RPARENT         reduce using rule 39 (vcte -> cte_float .)
    COMMA           reduce using rule 39 (vcte -> cte_float .)
    RBRACK          reduce using rule 39 (vcte -> cte_float .)


state 108

    (40) vcte -> cte_string .

    MULT            reduce using rule 40 (vcte -> cte_string .)
    DIVIDE          reduce using rule 40 (vcte -> cte_string .)
    PLUS            reduce using rule 40 (vcte -> cte_string .)
    MINUS           reduce using rule 40 (vcte -> cte_string .)
    SEMICOLON       reduce using rule 40 (vcte -> cte_string .)
    GREATERT        reduce using rule 40 (vcte -> cte_string .)
    MINORT          reduce using rule 40 (vcte -> cte_string .)
    GREATEREQT      reduce using rule 40 (vcte -> cte_string .)
    MINOREQT        reduce using rule 40 (vcte -> cte_string .)
    DIFFERENT       reduce using rule 40 (vcte -> cte_string .)
    ISEQUAL         reduce using rule 40 (vcte -> cte_string .)
    RPARENT         reduce using rule 40 (vcte -> cte_string .)
    COMMA           reduce using rule 40 (vcte -> cte_string .)
    RBRACK          reduce using rule 40 (vcte -> cte_string .)


state 109

    (41) vcte -> id .

    MULT            reduce using rule 41 (vcte -> id .)
    DIVIDE          reduce using rule 41 (vcte -> id .)
    PLUS            reduce using rule 41 (vcte -> id .)
    MINUS           reduce using rule 41 (vcte -> id .)
    SEMICOLON       reduce using rule 41 (vcte -> id .)
    GREATERT        reduce using rule 41 (vcte -> id .)
    MINORT          reduce using rule 41 (vcte -> id .)
    GREATEREQT      reduce using rule 41 (vcte -> id .)
    MINOREQT        reduce using rule 41 (vcte -> id .)
    DIFFERENT       reduce using rule 41 (vcte -> id .)
    ISEQUAL         reduce using rule 41 (vcte -> id .)
    RPARENT         reduce using rule 41 (vcte -> id .)
    COMMA           reduce using rule 41 (vcte -> id .)
    RBRACK          reduce using rule 41 (vcte -> id .)


state 110

    (42) vcte -> funCall .

    MULT            reduce using rule 42 (vcte -> funCall .)
    DIVIDE          reduce using rule 42 (vcte -> funCall .)
    PLUS            reduce using rule 42 (vcte -> funCall .)
    MINUS           reduce using rule 42 (vcte -> funCall .)
    SEMICOLON       reduce using rule 42 (vcte -> funCall .)
    GREATERT        reduce using rule 42 (vcte -> funCall .)
    MINORT          reduce using rule 42 (vcte -> funCall .)
    GREATEREQT      reduce using rule 42 (vcte -> funCall .)
    MINOREQT        reduce using rule 42 (vcte -> funCall .)
    DIFFERENT       reduce using rule 42 (vcte -> funCall .)
    ISEQUAL         reduce using rule 42 (vcte -> funCall .)
    RPARENT         reduce using rule 42 (vcte -> funCall .)
    COMMA           reduce using rule 42 (vcte -> funCall .)
    RBRACK          reduce using rule 42 (vcte -> funCall .)


state 111

    (43) vcte -> vectormatriz .

    MULT            reduce using rule 43 (vcte -> vectormatriz .)
    DIVIDE          reduce using rule 43 (vcte -> vectormatriz .)
    PLUS            reduce using rule 43 (vcte -> vectormatriz .)
    MINUS           reduce using rule 43 (vcte -> vectormatriz .)
    SEMICOLON       reduce using rule 43 (vcte -> vectormatriz .)
    GREATERT        reduce using rule 43 (vcte -> vectormatriz .)
    MINORT          reduce using rule 43 (vcte -> vectormatriz .)
    GREATEREQT      reduce using rule 43 (vcte -> vectormatriz .)
    MINOREQT        reduce using rule 43 (vcte -> vectormatriz .)
    DIFFERENT       reduce using rule 43 (vcte -> vectormatriz .)
    ISEQUAL         reduce using rule 43 (vcte -> vectormatriz .)
    RPARENT         reduce using rule 43 (vcte -> vectormatriz .)
    COMMA           reduce using rule 43 (vcte -> vectormatriz .)
    RBRACK          reduce using rule 43 (vcte -> vectormatriz .)


state 112

    (154) openP -> LPARENT .

    LPARENT         reduce using rule 154 (openP -> LPARENT .)
    CTE_STRING      reduce using rule 154 (openP -> LPARENT .)
    ID              reduce using rule 154 (openP -> LPARENT .)
    LBRACK          reduce using rule 154 (openP -> LPARENT .)
    MINUS           reduce using rule 154 (openP -> LPARENT .)
    CTE_INT         reduce using rule 154 (openP -> LPARENT .)
    CTE_FLOAT       reduce using rule 154 (openP -> LPARENT .)


state 113

    (89) cte_int -> negativo . CTE_INT
    (90) cte_float -> negativo . CTE_FLOAT

    CTE_INT         shift and go to state 176
    CTE_FLOAT       shift and go to state 177


state 114

    (91) cte_string -> CTE_STRING .

    MULT            reduce using rule 91 (cte_string -> CTE_STRING .)
    DIVIDE          reduce using rule 91 (cte_string -> CTE_STRING .)
    PLUS            reduce using rule 91 (cte_string -> CTE_STRING .)
    MINUS           reduce using rule 91 (cte_string -> CTE_STRING .)
    SEMICOLON       reduce using rule 91 (cte_string -> CTE_STRING .)
    GREATERT        reduce using rule 91 (cte_string -> CTE_STRING .)
    MINORT          reduce using rule 91 (cte_string -> CTE_STRING .)
    GREATEREQT      reduce using rule 91 (cte_string -> CTE_STRING .)
    MINOREQT        reduce using rule 91 (cte_string -> CTE_STRING .)
    DIFFERENT       reduce using rule 91 (cte_string -> CTE_STRING .)
    ISEQUAL         reduce using rule 91 (cte_string -> CTE_STRING .)
    RPARENT         reduce using rule 91 (cte_string -> CTE_STRING .)
    COMMA           reduce using rule 91 (cte_string -> CTE_STRING .)
    RBRACK          reduce using rule 91 (cte_string -> CTE_STRING .)


state 115

    (44) vectormatriz -> LBRACK . vm1 RBRACK
    (46) vm1 -> LBRACK . vm2 RBRACK COMMA vm1
    (47) vm1 -> LBRACK . vm2 RBRACK
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (48) vm2 -> . exp COMMA vm2
    (49) vm2 -> . exp
    (50) vm2 -> . empty
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (164) empty -> .
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID

    LBRACK          shift and go to state 178
    RBRACK          reduce using rule 164 (empty -> .)
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)
    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    MINUS           shift and go to state 117

    vm1                            shift and go to state 179
    vm2                            shift and go to state 180
    exp                            shift and go to state 181
    empty                          shift and go to state 182
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64

state 116

    (45) vectormatriz -> vm1 .

    MULT            reduce using rule 45 (vectormatriz -> vm1 .)
    DIVIDE          reduce using rule 45 (vectormatriz -> vm1 .)
    PLUS            reduce using rule 45 (vectormatriz -> vm1 .)
    MINUS           reduce using rule 45 (vectormatriz -> vm1 .)
    SEMICOLON       reduce using rule 45 (vectormatriz -> vm1 .)
    GREATERT        reduce using rule 45 (vectormatriz -> vm1 .)
    MINORT          reduce using rule 45 (vectormatriz -> vm1 .)
    GREATEREQT      reduce using rule 45 (vectormatriz -> vm1 .)
    MINOREQT        reduce using rule 45 (vectormatriz -> vm1 .)
    DIFFERENT       reduce using rule 45 (vectormatriz -> vm1 .)
    ISEQUAL         reduce using rule 45 (vectormatriz -> vm1 .)
    RPARENT         reduce using rule 45 (vectormatriz -> vm1 .)
    COMMA           reduce using rule 45 (vectormatriz -> vm1 .)
    RBRACK          reduce using rule 45 (vectormatriz -> vm1 .)


state 117

    (162) negativo -> MINUS .

    CTE_INT         reduce using rule 162 (negativo -> MINUS .)
    CTE_FLOAT       reduce using rule 162 (negativo -> MINUS .)


state 118

    (163) negativo -> empty .

    CTE_INT         reduce using rule 163 (negativo -> empty .)
    CTE_FLOAT       reduce using rule 163 (negativo -> empty .)


state 119

    (15) dimensionada -> LBRACK CTE_INT RBRACK .
    (16) dimensionada -> LBRACK CTE_INT RBRACK . LBRACK CTE_INT RBRACK

    SEMICOLON       reduce using rule 15 (dimensionada -> LBRACK CTE_INT RBRACK .)
    EQUAL           reduce using rule 15 (dimensionada -> LBRACK CTE_INT RBRACK .)
    LBRACK          shift and go to state 183


state 120

    (6) mainF -> mainFI declara_vars mainF1 RCURBRA .

    $end            reduce using rule 6 (mainF -> mainFI declara_vars mainF1 RCURBRA .)


state 121

    (9) mainF1 -> stmt_v mainF1 .

    RCURBRA         reduce using rule 9 (mainF1 -> stmt_v mainF1 .)


state 122

    (34) stmt_v -> funCall SEMICOLON .

    IF              reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    PRINT           reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    READ            reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    ID              reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    FOR             reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    CIRCLE          reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    SQUARE          reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    TRIANGLE        reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    RECTANGLE       reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    EXIT            reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    START_F         reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    END_F           reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    POINTER_COLOR   reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    POINTER_SIZE    reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    SPEED           reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    POSITION        reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    DOWN            reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    UP              reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    GO              reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    LEFT            reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    RIGHT           reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    BACK            reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    WHILE           reduce using rule 34 (stmt_v -> funCall SEMICOLON .)
    RCURBRA         reduce using rule 34 (stmt_v -> funCall SEMICOLON .)


state 123

    (35) assignment -> id equals . assignment3 SEMICOLON
    (36) assignment3 -> . exp
    (37) assignment3 -> . read
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (71) read -> . READ LPARENT id read1 RPARENT SEMICOLON
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    READ            shift and go to state 59
    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    id                             shift and go to state 109
    assignment3                    shift and go to state 184
    exp                            shift and go to state 185
    read                           shift and go to state 186
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 124

    (101) condition -> IF head_cond . body condition1
    (108) body -> . LCURBRA body1 RCURBRA

    LCURBRA         shift and go to state 134

    body                           shift and go to state 187

state 125

    (107) head_cond -> LPARENT . expression close_condition
    (148) expression -> . exp loper exp
    (149) expression -> . exp
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    expression                     shift and go to state 188
    exp                            shift and go to state 175
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 126

    (70) print -> PRINT LPARENT . expression RPARENT SEMICOLON
    (148) expression -> . exp loper exp
    (149) expression -> . exp
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    expression                     shift and go to state 189
    exp                            shift and go to state 175
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 127

    (71) read -> READ LPARENT . id read1 RPARENT SEMICOLON
    (80) id -> . aidi indice_dimensionada
    (79) aidi -> . ID

    ID              shift and go to state 191

    id                             shift and go to state 190
    aidi                           shift and go to state 64

state 128

    (81) funCall -> ID iniciaFunCall . funCall2 terminaFunCall
    (84) funCall2 -> . funCallParam funCall3
    (85) funCall2 -> . empty
    (88) funCallParam -> . exp
    (164) empty -> .
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK

    RPARENT         reduce using rule 164 (empty -> .)
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)
    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117

    funCall2                       shift and go to state 192
    funCallParam                   shift and go to state 193
    empty                          shift and go to state 194
    exp                            shift and go to state 195
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116

state 129

    (82) iniciaFunCall -> LPARENT .

    LPARENT         reduce using rule 82 (iniciaFunCall -> LPARENT .)
    CTE_STRING      reduce using rule 82 (iniciaFunCall -> LPARENT .)
    ID              reduce using rule 82 (iniciaFunCall -> LPARENT .)
    LBRACK          reduce using rule 82 (iniciaFunCall -> LPARENT .)
    MINUS           reduce using rule 82 (iniciaFunCall -> LPARENT .)
    RPARENT         reduce using rule 82 (iniciaFunCall -> LPARENT .)
    CTE_INT         reduce using rule 82 (iniciaFunCall -> LPARENT .)
    CTE_FLOAT       reduce using rule 82 (iniciaFunCall -> LPARENT .)


state 130

    (80) id -> aidi indice_dimensionada .

    EQUAL           reduce using rule 80 (id -> aidi indice_dimensionada .)
    MULT            reduce using rule 80 (id -> aidi indice_dimensionada .)
    DIVIDE          reduce using rule 80 (id -> aidi indice_dimensionada .)
    PLUS            reduce using rule 80 (id -> aidi indice_dimensionada .)
    MINUS           reduce using rule 80 (id -> aidi indice_dimensionada .)
    SEMICOLON       reduce using rule 80 (id -> aidi indice_dimensionada .)
    GREATERT        reduce using rule 80 (id -> aidi indice_dimensionada .)
    MINORT          reduce using rule 80 (id -> aidi indice_dimensionada .)
    GREATEREQT      reduce using rule 80 (id -> aidi indice_dimensionada .)
    MINOREQT        reduce using rule 80 (id -> aidi indice_dimensionada .)
    DIFFERENT       reduce using rule 80 (id -> aidi indice_dimensionada .)
    ISEQUAL         reduce using rule 80 (id -> aidi indice_dimensionada .)
    RPARENT         reduce using rule 80 (id -> aidi indice_dimensionada .)
    COMMA           reduce using rule 80 (id -> aidi indice_dimensionada .)
    RBRACK          reduce using rule 80 (id -> aidi indice_dimensionada .)
    LBRACK          reduce using rule 80 (id -> aidi indice_dimensionada .)
    COLON           reduce using rule 80 (id -> aidi indice_dimensionada .)


state 131

    (76) indice_dimensionada -> LBRACK . exp RBRACK LBRACK exp RBRACK
    (77) indice_dimensionada -> LBRACK . exp RBRACK
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    exp                            shift and go to state 196
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 132

    (78) indice_dimensionada -> empty .

    EQUAL           reduce using rule 78 (indice_dimensionada -> empty .)
    MULT            reduce using rule 78 (indice_dimensionada -> empty .)
    DIVIDE          reduce using rule 78 (indice_dimensionada -> empty .)
    PLUS            reduce using rule 78 (indice_dimensionada -> empty .)
    MINUS           reduce using rule 78 (indice_dimensionada -> empty .)
    SEMICOLON       reduce using rule 78 (indice_dimensionada -> empty .)
    GREATERT        reduce using rule 78 (indice_dimensionada -> empty .)
    MINORT          reduce using rule 78 (indice_dimensionada -> empty .)
    GREATEREQT      reduce using rule 78 (indice_dimensionada -> empty .)
    MINOREQT        reduce using rule 78 (indice_dimensionada -> empty .)
    DIFFERENT       reduce using rule 78 (indice_dimensionada -> empty .)
    ISEQUAL         reduce using rule 78 (indice_dimensionada -> empty .)
    RPARENT         reduce using rule 78 (indice_dimensionada -> empty .)
    COMMA           reduce using rule 78 (indice_dimensionada -> empty .)
    RBRACK          reduce using rule 78 (indice_dimensionada -> empty .)
    LBRACK          reduce using rule 78 (indice_dimensionada -> empty .)
    COLON           reduce using rule 78 (indice_dimensionada -> empty .)


state 133

    (116) while -> while1 body .

    IF              reduce using rule 116 (while -> while1 body .)
    PRINT           reduce using rule 116 (while -> while1 body .)
    READ            reduce using rule 116 (while -> while1 body .)
    ID              reduce using rule 116 (while -> while1 body .)
    FOR             reduce using rule 116 (while -> while1 body .)
    CIRCLE          reduce using rule 116 (while -> while1 body .)
    SQUARE          reduce using rule 116 (while -> while1 body .)
    TRIANGLE        reduce using rule 116 (while -> while1 body .)
    RECTANGLE       reduce using rule 116 (while -> while1 body .)
    EXIT            reduce using rule 116 (while -> while1 body .)
    START_F         reduce using rule 116 (while -> while1 body .)
    END_F           reduce using rule 116 (while -> while1 body .)
    POINTER_COLOR   reduce using rule 116 (while -> while1 body .)
    POINTER_SIZE    reduce using rule 116 (while -> while1 body .)
    SPEED           reduce using rule 116 (while -> while1 body .)
    POSITION        reduce using rule 116 (while -> while1 body .)
    DOWN            reduce using rule 116 (while -> while1 body .)
    UP              reduce using rule 116 (while -> while1 body .)
    GO              reduce using rule 116 (while -> while1 body .)
    LEFT            reduce using rule 116 (while -> while1 body .)
    RIGHT           reduce using rule 116 (while -> while1 body .)
    BACK            reduce using rule 116 (while -> while1 body .)
    WHILE           reduce using rule 116 (while -> while1 body .)
    RCURBRA         reduce using rule 116 (while -> while1 body .)
    RETURN          reduce using rule 116 (while -> while1 body .)


state 134

    (108) body -> LCURBRA . body1 RCURBRA
    (110) body1 -> . stmt body1
    (111) body1 -> . empty
    (20) stmt -> . assignment
    (21) stmt -> . condition
    (22) stmt -> . print
    (23) stmt -> . loop
    (24) stmt -> . read
    (25) stmt -> . graphstmt
    (26) stmt -> . funCall SEMICOLON
    (27) stmt -> . return
    (164) empty -> .
    (35) assignment -> . id equals assignment3 SEMICOLON
    (101) condition -> . IF head_cond body condition1
    (70) print -> . PRINT LPARENT expression RPARENT SEMICOLON
    (18) loop -> . while
    (19) loop -> . for_v2
    (71) read -> . READ LPARENT id read1 RPARENT SEMICOLON
    (121) graphstmt -> . graphfig
    (122) graphstmt -> . graphview
    (123) graphstmt -> . graphmove
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (92) return -> . RETURN return1 SEMICOLON
    (80) id -> . aidi indice_dimensionada
    (116) while -> . while1 body
    (112) for_v2 -> . nuevo_for forBody
    (124) graphfig -> . graphfig1 SEMICOLON
    (125) graphfig -> . graphfig2 SEMICOLON
    (138) graphview -> . graphview0 SEMICOLON
    (139) graphview -> . graphview1 SEMICOLON
    (140) graphview -> . graphview2 SEMICOLON
    (130) graphmove -> . graphmove0 SEMICOLON
    (131) graphmove -> . graphmove1 SEMICOLON
    (79) aidi -> . ID
    (117) while1 -> . while_w LPARENT expression RPARENT
    (113) nuevo_for -> . FOR LPARENT id COLON for2 RPARENT
    (126) graphfig1 -> . CIRCLE unaExp
    (127) graphfig1 -> . SQUARE unaExp
    (128) graphfig1 -> . TRIANGLE unaExp
    (129) graphfig2 -> . RECTANGLE dosExp
    (141) graphview0 -> . EXIT
    (142) graphview0 -> . START_F
    (143) graphview0 -> . END_F
    (144) graphview1 -> . POINTER_COLOR unaExp
    (145) graphview1 -> . POINTER_SIZE unaExp
    (146) graphview1 -> . SPEED unaExp
    (147) graphview2 -> . POSITION dosExp
    (132) graphmove0 -> . DOWN
    (133) graphmove0 -> . UP
    (134) graphmove1 -> . GO unaExp
    (135) graphmove1 -> . LEFT unaExp
    (136) graphmove1 -> . RIGHT unaExp
    (137) graphmove1 -> . BACK unaExp
    (118) while_w -> . WHILE

    RCURBRA         reduce using rule 164 (empty -> .)
    IF              shift and go to state 55
    PRINT           shift and go to state 56
    READ            shift and go to state 59
    ID              shift and go to state 63
    RETURN          shift and go to state 208
    FOR             shift and go to state 75
    CIRCLE          shift and go to state 76
    SQUARE          shift and go to state 77
    TRIANGLE        shift and go to state 78
    RECTANGLE       shift and go to state 79
    EXIT            shift and go to state 80
    START_F         shift and go to state 81
    END_F           shift and go to state 82
    POINTER_COLOR   shift and go to state 83
    POINTER_SIZE    shift and go to state 84
    SPEED           shift and go to state 85
    POSITION        shift and go to state 86
    DOWN            shift and go to state 87
    UP              shift and go to state 88
    GO              shift and go to state 89
    LEFT            shift and go to state 90
    RIGHT           shift and go to state 91
    BACK            shift and go to state 92
    WHILE           shift and go to state 93

    body1                          shift and go to state 197
    stmt                           shift and go to state 198
    empty                          shift and go to state 199
    assignment                     shift and go to state 200
    condition                      shift and go to state 201
    print                          shift and go to state 202
    loop                           shift and go to state 203
    read                           shift and go to state 204
    graphstmt                      shift and go to state 205
    funCall                        shift and go to state 206
    return                         shift and go to state 207
    id                             shift and go to state 54
    while                          shift and go to state 57
    for_v2                         shift and go to state 58
    graphfig                       shift and go to state 60
    graphview                      shift and go to state 61
    graphmove                      shift and go to state 62
    aidi                           shift and go to state 64
    while1                         shift and go to state 65
    nuevo_for                      shift and go to state 66
    graphfig1                      shift and go to state 67
    graphfig2                      shift and go to state 68
    graphview0                     shift and go to state 69
    graphview1                     shift and go to state 70
    graphview2                     shift and go to state 71
    graphmove0                     shift and go to state 72
    graphmove1                     shift and go to state 73
    while_w                        shift and go to state 74

state 135

    (112) for_v2 -> nuevo_for forBody .

    IF              reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    PRINT           reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    READ            reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    ID              reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    FOR             reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    CIRCLE          reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    SQUARE          reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    TRIANGLE        reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    RECTANGLE       reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    EXIT            reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    START_F         reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    END_F           reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    POINTER_COLOR   reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    POINTER_SIZE    reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    SPEED           reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    POSITION        reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    DOWN            reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    UP              reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    GO              reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    LEFT            reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    RIGHT           reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    BACK            reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    WHILE           reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    RCURBRA         reduce using rule 112 (for_v2 -> nuevo_for forBody .)
    RETURN          reduce using rule 112 (for_v2 -> nuevo_for forBody .)


state 136

    (115) forBody -> body .

    IF              reduce using rule 115 (forBody -> body .)
    PRINT           reduce using rule 115 (forBody -> body .)
    READ            reduce using rule 115 (forBody -> body .)
    ID              reduce using rule 115 (forBody -> body .)
    FOR             reduce using rule 115 (forBody -> body .)
    CIRCLE          reduce using rule 115 (forBody -> body .)
    SQUARE          reduce using rule 115 (forBody -> body .)
    TRIANGLE        reduce using rule 115 (forBody -> body .)
    RECTANGLE       reduce using rule 115 (forBody -> body .)
    EXIT            reduce using rule 115 (forBody -> body .)
    START_F         reduce using rule 115 (forBody -> body .)
    END_F           reduce using rule 115 (forBody -> body .)
    POINTER_COLOR   reduce using rule 115 (forBody -> body .)
    POINTER_SIZE    reduce using rule 115 (forBody -> body .)
    SPEED           reduce using rule 115 (forBody -> body .)
    POSITION        reduce using rule 115 (forBody -> body .)
    DOWN            reduce using rule 115 (forBody -> body .)
    UP              reduce using rule 115 (forBody -> body .)
    GO              reduce using rule 115 (forBody -> body .)
    LEFT            reduce using rule 115 (forBody -> body .)
    RIGHT           reduce using rule 115 (forBody -> body .)
    BACK            reduce using rule 115 (forBody -> body .)
    WHILE           reduce using rule 115 (forBody -> body .)
    RCURBRA         reduce using rule 115 (forBody -> body .)
    RETURN          reduce using rule 115 (forBody -> body .)


state 137

    (124) graphfig -> graphfig1 SEMICOLON .

    IF              reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    PRINT           reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    READ            reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    ID              reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    FOR             reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    CIRCLE          reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    SQUARE          reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    TRIANGLE        reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    RECTANGLE       reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    EXIT            reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    START_F         reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    END_F           reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    POINTER_COLOR   reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    POINTER_SIZE    reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    SPEED           reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    POSITION        reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    DOWN            reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    UP              reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    GO              reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    LEFT            reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    RIGHT           reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    BACK            reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    WHILE           reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    RCURBRA         reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)
    RETURN          reduce using rule 124 (graphfig -> graphfig1 SEMICOLON .)


state 138

    (125) graphfig -> graphfig2 SEMICOLON .

    IF              reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    PRINT           reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    READ            reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    ID              reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    FOR             reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    CIRCLE          reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    SQUARE          reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    TRIANGLE        reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    RECTANGLE       reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    EXIT            reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    START_F         reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    END_F           reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    POINTER_COLOR   reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    POINTER_SIZE    reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    SPEED           reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    POSITION        reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    DOWN            reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    UP              reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    GO              reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    LEFT            reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    RIGHT           reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    BACK            reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    WHILE           reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    RCURBRA         reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)
    RETURN          reduce using rule 125 (graphfig -> graphfig2 SEMICOLON .)


state 139

    (138) graphview -> graphview0 SEMICOLON .

    IF              reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    PRINT           reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    READ            reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    ID              reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    FOR             reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    CIRCLE          reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    SQUARE          reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    TRIANGLE        reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    RECTANGLE       reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    EXIT            reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    START_F         reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    END_F           reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    POINTER_COLOR   reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    POINTER_SIZE    reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    SPEED           reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    POSITION        reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    DOWN            reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    UP              reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    GO              reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    LEFT            reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    RIGHT           reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    BACK            reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    WHILE           reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    RCURBRA         reduce using rule 138 (graphview -> graphview0 SEMICOLON .)
    RETURN          reduce using rule 138 (graphview -> graphview0 SEMICOLON .)


state 140

    (139) graphview -> graphview1 SEMICOLON .

    IF              reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    PRINT           reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    READ            reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    ID              reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    FOR             reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    CIRCLE          reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    SQUARE          reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    TRIANGLE        reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    RECTANGLE       reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    EXIT            reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    START_F         reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    END_F           reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    POINTER_COLOR   reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    POINTER_SIZE    reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    SPEED           reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    POSITION        reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    DOWN            reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    UP              reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    GO              reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    LEFT            reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    RIGHT           reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    BACK            reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    WHILE           reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    RCURBRA         reduce using rule 139 (graphview -> graphview1 SEMICOLON .)
    RETURN          reduce using rule 139 (graphview -> graphview1 SEMICOLON .)


state 141

    (140) graphview -> graphview2 SEMICOLON .

    IF              reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    PRINT           reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    READ            reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    ID              reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    FOR             reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    CIRCLE          reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    SQUARE          reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    TRIANGLE        reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    RECTANGLE       reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    EXIT            reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    START_F         reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    END_F           reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    POINTER_COLOR   reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    POINTER_SIZE    reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    SPEED           reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    POSITION        reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    DOWN            reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    UP              reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    GO              reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    LEFT            reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    RIGHT           reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    BACK            reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    WHILE           reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    RCURBRA         reduce using rule 140 (graphview -> graphview2 SEMICOLON .)
    RETURN          reduce using rule 140 (graphview -> graphview2 SEMICOLON .)


state 142

    (130) graphmove -> graphmove0 SEMICOLON .

    IF              reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    PRINT           reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    READ            reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    ID              reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    FOR             reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    CIRCLE          reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    SQUARE          reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    TRIANGLE        reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    RECTANGLE       reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    EXIT            reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    START_F         reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    END_F           reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    POINTER_COLOR   reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    POINTER_SIZE    reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    SPEED           reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    POSITION        reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    DOWN            reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    UP              reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    GO              reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    LEFT            reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    RIGHT           reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    BACK            reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    WHILE           reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    RCURBRA         reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)
    RETURN          reduce using rule 130 (graphmove -> graphmove0 SEMICOLON .)


state 143

    (131) graphmove -> graphmove1 SEMICOLON .

    IF              reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    PRINT           reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    READ            reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    ID              reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    FOR             reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    CIRCLE          reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    SQUARE          reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    TRIANGLE        reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    RECTANGLE       reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    EXIT            reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    START_F         reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    END_F           reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    POINTER_COLOR   reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    POINTER_SIZE    reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    SPEED           reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    POSITION        reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    DOWN            reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    UP              reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    GO              reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    LEFT            reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    RIGHT           reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    BACK            reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    WHILE           reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    RCURBRA         reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)
    RETURN          reduce using rule 131 (graphmove -> graphmove1 SEMICOLON .)


state 144

    (117) while1 -> while_w LPARENT . expression RPARENT
    (148) expression -> . exp loper exp
    (149) expression -> . exp
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    expression                     shift and go to state 209
    exp                            shift and go to state 175
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 145

    (113) nuevo_for -> FOR LPARENT . id COLON for2 RPARENT
    (80) id -> . aidi indice_dimensionada
    (79) aidi -> . ID

    ID              shift and go to state 191

    id                             shift and go to state 210
    aidi                           shift and go to state 64

state 146

    (126) graphfig1 -> CIRCLE unaExp .

    SEMICOLON       reduce using rule 126 (graphfig1 -> CIRCLE unaExp .)


state 147

    (120) unaExp -> LPARENT . exp RPARENT
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    exp                            shift and go to state 211
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 148

    (127) graphfig1 -> SQUARE unaExp .

    SEMICOLON       reduce using rule 127 (graphfig1 -> SQUARE unaExp .)


state 149

    (128) graphfig1 -> TRIANGLE unaExp .

    SEMICOLON       reduce using rule 128 (graphfig1 -> TRIANGLE unaExp .)


state 150

    (129) graphfig2 -> RECTANGLE dosExp .

    SEMICOLON       reduce using rule 129 (graphfig2 -> RECTANGLE dosExp .)


state 151

    (119) dosExp -> LPARENT . exp COMMA exp RPARENT
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    exp                            shift and go to state 212
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 152

    (144) graphview1 -> POINTER_COLOR unaExp .

    SEMICOLON       reduce using rule 144 (graphview1 -> POINTER_COLOR unaExp .)


state 153

    (145) graphview1 -> POINTER_SIZE unaExp .

    SEMICOLON       reduce using rule 145 (graphview1 -> POINTER_SIZE unaExp .)


state 154

    (146) graphview1 -> SPEED unaExp .

    SEMICOLON       reduce using rule 146 (graphview1 -> SPEED unaExp .)


state 155

    (147) graphview2 -> POSITION dosExp .

    SEMICOLON       reduce using rule 147 (graphview2 -> POSITION dosExp .)


state 156

    (134) graphmove1 -> GO unaExp .

    SEMICOLON       reduce using rule 134 (graphmove1 -> GO unaExp .)


state 157

    (135) graphmove1 -> LEFT unaExp .

    SEMICOLON       reduce using rule 135 (graphmove1 -> LEFT unaExp .)


state 158

    (136) graphmove1 -> RIGHT unaExp .

    SEMICOLON       reduce using rule 136 (graphmove1 -> RIGHT unaExp .)


state 159

    (137) graphmove1 -> BACK unaExp .

    SEMICOLON       reduce using rule 137 (graphmove1 -> BACK unaExp .)


state 160

    (53) function_t -> FUNCTION functionI function2 inicia_fun declara_vars . function4 termina_fun
    (60) function4 -> . stmt function4
    (61) function4 -> . empty
    (20) stmt -> . assignment
    (21) stmt -> . condition
    (22) stmt -> . print
    (23) stmt -> . loop
    (24) stmt -> . read
    (25) stmt -> . graphstmt
    (26) stmt -> . funCall SEMICOLON
    (27) stmt -> . return
    (164) empty -> .
    (35) assignment -> . id equals assignment3 SEMICOLON
    (101) condition -> . IF head_cond body condition1
    (70) print -> . PRINT LPARENT expression RPARENT SEMICOLON
    (18) loop -> . while
    (19) loop -> . for_v2
    (71) read -> . READ LPARENT id read1 RPARENT SEMICOLON
    (121) graphstmt -> . graphfig
    (122) graphstmt -> . graphview
    (123) graphstmt -> . graphmove
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (92) return -> . RETURN return1 SEMICOLON
    (80) id -> . aidi indice_dimensionada
    (116) while -> . while1 body
    (112) for_v2 -> . nuevo_for forBody
    (124) graphfig -> . graphfig1 SEMICOLON
    (125) graphfig -> . graphfig2 SEMICOLON
    (138) graphview -> . graphview0 SEMICOLON
    (139) graphview -> . graphview1 SEMICOLON
    (140) graphview -> . graphview2 SEMICOLON
    (130) graphmove -> . graphmove0 SEMICOLON
    (131) graphmove -> . graphmove1 SEMICOLON
    (79) aidi -> . ID
    (117) while1 -> . while_w LPARENT expression RPARENT
    (113) nuevo_for -> . FOR LPARENT id COLON for2 RPARENT
    (126) graphfig1 -> . CIRCLE unaExp
    (127) graphfig1 -> . SQUARE unaExp
    (128) graphfig1 -> . TRIANGLE unaExp
    (129) graphfig2 -> . RECTANGLE dosExp
    (141) graphview0 -> . EXIT
    (142) graphview0 -> . START_F
    (143) graphview0 -> . END_F
    (144) graphview1 -> . POINTER_COLOR unaExp
    (145) graphview1 -> . POINTER_SIZE unaExp
    (146) graphview1 -> . SPEED unaExp
    (147) graphview2 -> . POSITION dosExp
    (132) graphmove0 -> . DOWN
    (133) graphmove0 -> . UP
    (134) graphmove1 -> . GO unaExp
    (135) graphmove1 -> . LEFT unaExp
    (136) graphmove1 -> . RIGHT unaExp
    (137) graphmove1 -> . BACK unaExp
    (118) while_w -> . WHILE

    RCURBRA         reduce using rule 164 (empty -> .)
    IF              shift and go to state 55
    PRINT           shift and go to state 56
    READ            shift and go to state 59
    ID              shift and go to state 63
    RETURN          shift and go to state 208
    FOR             shift and go to state 75
    CIRCLE          shift and go to state 76
    SQUARE          shift and go to state 77
    TRIANGLE        shift and go to state 78
    RECTANGLE       shift and go to state 79
    EXIT            shift and go to state 80
    START_F         shift and go to state 81
    END_F           shift and go to state 82
    POINTER_COLOR   shift and go to state 83
    POINTER_SIZE    shift and go to state 84
    SPEED           shift and go to state 85
    POSITION        shift and go to state 86
    DOWN            shift and go to state 87
    UP              shift and go to state 88
    GO              shift and go to state 89
    LEFT            shift and go to state 90
    RIGHT           shift and go to state 91
    BACK            shift and go to state 92
    WHILE           shift and go to state 93

    function4                      shift and go to state 213
    stmt                           shift and go to state 214
    empty                          shift and go to state 215
    assignment                     shift and go to state 200
    condition                      shift and go to state 201
    print                          shift and go to state 202
    loop                           shift and go to state 203
    read                           shift and go to state 204
    graphstmt                      shift and go to state 205
    funCall                        shift and go to state 206
    return                         shift and go to state 207
    id                             shift and go to state 54
    while                          shift and go to state 57
    for_v2                         shift and go to state 58
    graphfig                       shift and go to state 60
    graphview                      shift and go to state 61
    graphmove                      shift and go to state 62
    aidi                           shift and go to state 64
    while1                         shift and go to state 65
    nuevo_for                      shift and go to state 66
    graphfig1                      shift and go to state 67
    graphfig2                      shift and go to state 68
    graphview0                     shift and go to state 69
    graphview1                     shift and go to state 70
    graphview2                     shift and go to state 71
    graphmove0                     shift and go to state 72
    graphmove1                     shift and go to state 73
    while_w                        shift and go to state 74

state 161

    (57) function2 -> LPARENT function3 RPARENT .

    LCURBRA         reduce using rule 57 (function2 -> LPARENT function3 RPARENT .)


state 162

    (58) function3 -> funParam function5 .

    RPARENT         reduce using rule 58 (function3 -> funParam function5 .)


state 163

    (64) function5 -> COMMA . funParam function5
    (66) funParam -> . type ID
    (67) type -> . INT
    (68) type -> . FLOAT
    (69) type -> . STRING

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    STRING          shift and go to state 11

    funParam                       shift and go to state 216
    type                           shift and go to state 99

state 164

    (65) function5 -> empty .

    RPARENT         reduce using rule 65 (function5 -> empty .)


state 165

    (66) funParam -> type ID .

    COMMA           reduce using rule 66 (funParam -> type ID .)
    RPARENT         reduce using rule 66 (funParam -> type ID .)


state 166

    (54) function_v -> FUNCTION functionV function2 inicia_fun declara_vars . function9 termina_fun
    (62) function9 -> . stmt_v function9
    (63) function9 -> . empty
    (28) stmt_v -> . assignment
    (29) stmt_v -> . condition
    (30) stmt_v -> . print
    (31) stmt_v -> . loop
    (32) stmt_v -> . read
    (33) stmt_v -> . graphstmt
    (34) stmt_v -> . funCall SEMICOLON
    (164) empty -> .
    (35) assignment -> . id equals assignment3 SEMICOLON
    (101) condition -> . IF head_cond body condition1
    (70) print -> . PRINT LPARENT expression RPARENT SEMICOLON
    (18) loop -> . while
    (19) loop -> . for_v2
    (71) read -> . READ LPARENT id read1 RPARENT SEMICOLON
    (121) graphstmt -> . graphfig
    (122) graphstmt -> . graphview
    (123) graphstmt -> . graphmove
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (80) id -> . aidi indice_dimensionada
    (116) while -> . while1 body
    (112) for_v2 -> . nuevo_for forBody
    (124) graphfig -> . graphfig1 SEMICOLON
    (125) graphfig -> . graphfig2 SEMICOLON
    (138) graphview -> . graphview0 SEMICOLON
    (139) graphview -> . graphview1 SEMICOLON
    (140) graphview -> . graphview2 SEMICOLON
    (130) graphmove -> . graphmove0 SEMICOLON
    (131) graphmove -> . graphmove1 SEMICOLON
    (79) aidi -> . ID
    (117) while1 -> . while_w LPARENT expression RPARENT
    (113) nuevo_for -> . FOR LPARENT id COLON for2 RPARENT
    (126) graphfig1 -> . CIRCLE unaExp
    (127) graphfig1 -> . SQUARE unaExp
    (128) graphfig1 -> . TRIANGLE unaExp
    (129) graphfig2 -> . RECTANGLE dosExp
    (141) graphview0 -> . EXIT
    (142) graphview0 -> . START_F
    (143) graphview0 -> . END_F
    (144) graphview1 -> . POINTER_COLOR unaExp
    (145) graphview1 -> . POINTER_SIZE unaExp
    (146) graphview1 -> . SPEED unaExp
    (147) graphview2 -> . POSITION dosExp
    (132) graphmove0 -> . DOWN
    (133) graphmove0 -> . UP
    (134) graphmove1 -> . GO unaExp
    (135) graphmove1 -> . LEFT unaExp
    (136) graphmove1 -> . RIGHT unaExp
    (137) graphmove1 -> . BACK unaExp
    (118) while_w -> . WHILE

    RCURBRA         reduce using rule 164 (empty -> .)
    IF              shift and go to state 55
    PRINT           shift and go to state 56
    READ            shift and go to state 59
    ID              shift and go to state 63
    FOR             shift and go to state 75
    CIRCLE          shift and go to state 76
    SQUARE          shift and go to state 77
    TRIANGLE        shift and go to state 78
    RECTANGLE       shift and go to state 79
    EXIT            shift and go to state 80
    START_F         shift and go to state 81
    END_F           shift and go to state 82
    POINTER_COLOR   shift and go to state 83
    POINTER_SIZE    shift and go to state 84
    SPEED           shift and go to state 85
    POSITION        shift and go to state 86
    DOWN            shift and go to state 87
    UP              shift and go to state 88
    GO              shift and go to state 89
    LEFT            shift and go to state 90
    RIGHT           shift and go to state 91
    BACK            shift and go to state 92
    WHILE           shift and go to state 93

    function9                      shift and go to state 217
    stmt_v                         shift and go to state 218
    empty                          shift and go to state 219
    assignment                     shift and go to state 47
    condition                      shift and go to state 48
    print                          shift and go to state 49
    loop                           shift and go to state 50
    read                           shift and go to state 51
    graphstmt                      shift and go to state 52
    funCall                        shift and go to state 53
    id                             shift and go to state 54
    while                          shift and go to state 57
    for_v2                         shift and go to state 58
    graphfig                       shift and go to state 60
    graphview                      shift and go to state 61
    graphmove                      shift and go to state 62
    aidi                           shift and go to state 64
    while1                         shift and go to state 65
    nuevo_for                      shift and go to state 66
    graphfig1                      shift and go to state 67
    graphfig2                      shift and go to state 68
    graphview0                     shift and go to state 69
    graphview1                     shift and go to state 70
    graphview2                     shift and go to state 71
    graphmove0                     shift and go to state 72
    graphmove1                     shift and go to state 73
    while_w                        shift and go to state 74

state 167

    (13) vars -> type ID dimensionada equals exp SEMICOLON .

    INT             reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    FLOAT           reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    STRING          reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    FUNCTION        reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    MAINF           reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    IF              reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    PRINT           reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    READ            reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    ID              reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    FOR             reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    CIRCLE          reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    SQUARE          reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    TRIANGLE        reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    RECTANGLE       reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    EXIT            reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    START_F         reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    END_F           reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    POINTER_COLOR   reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    POINTER_SIZE    reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    SPEED           reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    POSITION        reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    DOWN            reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    UP              reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    GO              reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    LEFT            reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    RIGHT           reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    BACK            reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    WHILE           reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    RCURBRA         reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)
    RETURN          reduce using rule 13 (vars -> type ID dimensionada equals exp SEMICOLON .)


state 168

    (151) exp -> term exp_o . exp
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    term                           shift and go to state 102
    exp                            shift and go to state 220
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 169

    (152) exp_o -> PLUS .

    LPARENT         reduce using rule 152 (exp_o -> PLUS .)
    CTE_STRING      reduce using rule 152 (exp_o -> PLUS .)
    ID              reduce using rule 152 (exp_o -> PLUS .)
    LBRACK          reduce using rule 152 (exp_o -> PLUS .)
    MINUS           reduce using rule 152 (exp_o -> PLUS .)
    CTE_INT         reduce using rule 152 (exp_o -> PLUS .)
    CTE_FLOAT       reduce using rule 152 (exp_o -> PLUS .)


state 170

    (153) exp_o -> MINUS .

    LPARENT         reduce using rule 153 (exp_o -> MINUS .)
    CTE_STRING      reduce using rule 153 (exp_o -> MINUS .)
    ID              reduce using rule 153 (exp_o -> MINUS .)
    LBRACK          reduce using rule 153 (exp_o -> MINUS .)
    MINUS           reduce using rule 153 (exp_o -> MINUS .)
    CTE_INT         reduce using rule 153 (exp_o -> MINUS .)
    CTE_FLOAT       reduce using rule 153 (exp_o -> MINUS .)


state 171

    (156) term -> factor term_o . term
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    factor                         shift and go to state 103
    term                           shift and go to state 221
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 172

    (158) term_o -> MULT .

    LPARENT         reduce using rule 158 (term_o -> MULT .)
    CTE_STRING      reduce using rule 158 (term_o -> MULT .)
    ID              reduce using rule 158 (term_o -> MULT .)
    LBRACK          reduce using rule 158 (term_o -> MULT .)
    MINUS           reduce using rule 158 (term_o -> MULT .)
    CTE_INT         reduce using rule 158 (term_o -> MULT .)
    CTE_FLOAT       reduce using rule 158 (term_o -> MULT .)


state 173

    (159) term_o -> DIVIDE .

    LPARENT         reduce using rule 159 (term_o -> DIVIDE .)
    CTE_STRING      reduce using rule 159 (term_o -> DIVIDE .)
    ID              reduce using rule 159 (term_o -> DIVIDE .)
    LBRACK          reduce using rule 159 (term_o -> DIVIDE .)
    MINUS           reduce using rule 159 (term_o -> DIVIDE .)
    CTE_INT         reduce using rule 159 (term_o -> DIVIDE .)
    CTE_FLOAT       reduce using rule 159 (term_o -> DIVIDE .)


state 174

    (161) factor -> openP expression . closeP
    (155) closeP -> . RPARENT

    RPARENT         shift and go to state 223

    closeP                         shift and go to state 222

state 175

    (148) expression -> exp . loper exp
    (149) expression -> exp .
    (95) loper -> . GREATERT
    (96) loper -> . MINORT
    (97) loper -> . GREATEREQT
    (98) loper -> . MINOREQT
    (99) loper -> . DIFFERENT
    (100) loper -> . ISEQUAL

    RPARENT         reduce using rule 149 (expression -> exp .)
    GREATERT        shift and go to state 225
    MINORT          shift and go to state 226
    GREATEREQT      shift and go to state 227
    MINOREQT        shift and go to state 228
    DIFFERENT       shift and go to state 229
    ISEQUAL         shift and go to state 230

    loper                          shift and go to state 224

state 176

    (89) cte_int -> negativo CTE_INT .

    MULT            reduce using rule 89 (cte_int -> negativo CTE_INT .)
    DIVIDE          reduce using rule 89 (cte_int -> negativo CTE_INT .)
    PLUS            reduce using rule 89 (cte_int -> negativo CTE_INT .)
    MINUS           reduce using rule 89 (cte_int -> negativo CTE_INT .)
    SEMICOLON       reduce using rule 89 (cte_int -> negativo CTE_INT .)
    GREATERT        reduce using rule 89 (cte_int -> negativo CTE_INT .)
    MINORT          reduce using rule 89 (cte_int -> negativo CTE_INT .)
    GREATEREQT      reduce using rule 89 (cte_int -> negativo CTE_INT .)
    MINOREQT        reduce using rule 89 (cte_int -> negativo CTE_INT .)
    DIFFERENT       reduce using rule 89 (cte_int -> negativo CTE_INT .)
    ISEQUAL         reduce using rule 89 (cte_int -> negativo CTE_INT .)
    RPARENT         reduce using rule 89 (cte_int -> negativo CTE_INT .)
    COMMA           reduce using rule 89 (cte_int -> negativo CTE_INT .)
    RBRACK          reduce using rule 89 (cte_int -> negativo CTE_INT .)


state 177

    (90) cte_float -> negativo CTE_FLOAT .

    MULT            reduce using rule 90 (cte_float -> negativo CTE_FLOAT .)
    DIVIDE          reduce using rule 90 (cte_float -> negativo CTE_FLOAT .)
    PLUS            reduce using rule 90 (cte_float -> negativo CTE_FLOAT .)
    MINUS           reduce using rule 90 (cte_float -> negativo CTE_FLOAT .)
    SEMICOLON       reduce using rule 90 (cte_float -> negativo CTE_FLOAT .)
    GREATERT        reduce using rule 90 (cte_float -> negativo CTE_FLOAT .)
    MINORT          reduce using rule 90 (cte_float -> negativo CTE_FLOAT .)
    GREATEREQT      reduce using rule 90 (cte_float -> negativo CTE_FLOAT .)
    MINOREQT        reduce using rule 90 (cte_float -> negativo CTE_FLOAT .)
    DIFFERENT       reduce using rule 90 (cte_float -> negativo CTE_FLOAT .)
    ISEQUAL         reduce using rule 90 (cte_float -> negativo CTE_FLOAT .)
    RPARENT         reduce using rule 90 (cte_float -> negativo CTE_FLOAT .)
    COMMA           reduce using rule 90 (cte_float -> negativo CTE_FLOAT .)
    RBRACK          reduce using rule 90 (cte_float -> negativo CTE_FLOAT .)


state 178

    (46) vm1 -> LBRACK . vm2 RBRACK COMMA vm1
    (47) vm1 -> LBRACK . vm2 RBRACK
    (44) vectormatriz -> LBRACK . vm1 RBRACK
    (48) vm2 -> . exp COMMA vm2
    (49) vm2 -> . exp
    (50) vm2 -> . empty
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (164) empty -> .
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID

    LBRACK          shift and go to state 178
    RBRACK          reduce using rule 164 (empty -> .)
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)
    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    MINUS           shift and go to state 117

    vm2                            shift and go to state 180
    vm1                            shift and go to state 179
    exp                            shift and go to state 181
    empty                          shift and go to state 182
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64

state 179

    (44) vectormatriz -> LBRACK vm1 . RBRACK
    (45) vectormatriz -> vm1 .

  ! shift/reduce conflict for RBRACK resolved as shift
    RBRACK          shift and go to state 231
    MULT            reduce using rule 45 (vectormatriz -> vm1 .)
    DIVIDE          reduce using rule 45 (vectormatriz -> vm1 .)
    PLUS            reduce using rule 45 (vectormatriz -> vm1 .)
    MINUS           reduce using rule 45 (vectormatriz -> vm1 .)
    COMMA           reduce using rule 45 (vectormatriz -> vm1 .)

  ! RBRACK          [ reduce using rule 45 (vectormatriz -> vm1 .) ]


state 180

    (46) vm1 -> LBRACK vm2 . RBRACK COMMA vm1
    (47) vm1 -> LBRACK vm2 . RBRACK

    RBRACK          shift and go to state 232


state 181

    (48) vm2 -> exp . COMMA vm2
    (49) vm2 -> exp .

    COMMA           shift and go to state 233
    RBRACK          reduce using rule 49 (vm2 -> exp .)


state 182

    (50) vm2 -> empty .
    (163) negativo -> empty .

    RBRACK          reduce using rule 50 (vm2 -> empty .)
    CTE_INT         reduce using rule 163 (negativo -> empty .)
    CTE_FLOAT       reduce using rule 163 (negativo -> empty .)


state 183

    (16) dimensionada -> LBRACK CTE_INT RBRACK LBRACK . CTE_INT RBRACK

    CTE_INT         shift and go to state 234


state 184

    (35) assignment -> id equals assignment3 . SEMICOLON

    SEMICOLON       shift and go to state 235


state 185

    (36) assignment3 -> exp .

    SEMICOLON       reduce using rule 36 (assignment3 -> exp .)


state 186

    (37) assignment3 -> read .

    SEMICOLON       reduce using rule 37 (assignment3 -> read .)


state 187

    (101) condition -> IF head_cond body . condition1
    (102) condition1 -> . elseif head_cond body condition1
    (103) condition1 -> . else body
    (104) condition1 -> . empty
    (105) elseif -> . ELSEIF
    (106) else -> . ELSE
    (164) empty -> .

    ELSEIF          shift and go to state 240
    ELSE            shift and go to state 241
    IF              reduce using rule 164 (empty -> .)
    PRINT           reduce using rule 164 (empty -> .)
    READ            reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    FOR             reduce using rule 164 (empty -> .)
    CIRCLE          reduce using rule 164 (empty -> .)
    SQUARE          reduce using rule 164 (empty -> .)
    TRIANGLE        reduce using rule 164 (empty -> .)
    RECTANGLE       reduce using rule 164 (empty -> .)
    EXIT            reduce using rule 164 (empty -> .)
    START_F         reduce using rule 164 (empty -> .)
    END_F           reduce using rule 164 (empty -> .)
    POINTER_COLOR   reduce using rule 164 (empty -> .)
    POINTER_SIZE    reduce using rule 164 (empty -> .)
    SPEED           reduce using rule 164 (empty -> .)
    POSITION        reduce using rule 164 (empty -> .)
    DOWN            reduce using rule 164 (empty -> .)
    UP              reduce using rule 164 (empty -> .)
    GO              reduce using rule 164 (empty -> .)
    LEFT            reduce using rule 164 (empty -> .)
    RIGHT           reduce using rule 164 (empty -> .)
    BACK            reduce using rule 164 (empty -> .)
    WHILE           reduce using rule 164 (empty -> .)
    RCURBRA         reduce using rule 164 (empty -> .)
    RETURN          reduce using rule 164 (empty -> .)

    condition1                     shift and go to state 236
    elseif                         shift and go to state 237
    else                           shift and go to state 238
    empty                          shift and go to state 239

state 188

    (107) head_cond -> LPARENT expression . close_condition
    (109) close_condition -> . RPARENT

    RPARENT         shift and go to state 243

    close_condition                shift and go to state 242

state 189

    (70) print -> PRINT LPARENT expression . RPARENT SEMICOLON

    RPARENT         shift and go to state 244


state 190

    (71) read -> READ LPARENT id . read1 RPARENT SEMICOLON
    (72) read1 -> . LBRACK exp RBRACK LBRACK exp RBRACK
    (73) read1 -> . LBRACK exp RBRACK
    (74) read1 -> . empty
    (164) empty -> .

    LBRACK          shift and go to state 246
    RPARENT         reduce using rule 164 (empty -> .)

    read1                          shift and go to state 245
    empty                          shift and go to state 247

state 191

    (79) aidi -> ID .

    LBRACK          reduce using rule 79 (aidi -> ID .)
    RPARENT         reduce using rule 79 (aidi -> ID .)
    COLON           reduce using rule 79 (aidi -> ID .)


state 192

    (81) funCall -> ID iniciaFunCall funCall2 . terminaFunCall
    (83) terminaFunCall -> . RPARENT

    RPARENT         shift and go to state 249

    terminaFunCall                 shift and go to state 248

state 193

    (84) funCall2 -> funCallParam . funCall3
    (86) funCall3 -> . COMMA funCallParam funCall3
    (87) funCall3 -> . empty
    (164) empty -> .

    COMMA           shift and go to state 251
    RPARENT         reduce using rule 164 (empty -> .)

    funCall3                       shift and go to state 250
    empty                          shift and go to state 252

state 194

    (85) funCall2 -> empty .
    (163) negativo -> empty .

    RPARENT         reduce using rule 85 (funCall2 -> empty .)
    CTE_INT         reduce using rule 163 (negativo -> empty .)
    CTE_FLOAT       reduce using rule 163 (negativo -> empty .)


state 195

    (88) funCallParam -> exp .

    COMMA           reduce using rule 88 (funCallParam -> exp .)
    RPARENT         reduce using rule 88 (funCallParam -> exp .)


state 196

    (76) indice_dimensionada -> LBRACK exp . RBRACK LBRACK exp RBRACK
    (77) indice_dimensionada -> LBRACK exp . RBRACK

    RBRACK          shift and go to state 253


state 197

    (108) body -> LCURBRA body1 . RCURBRA

    RCURBRA         shift and go to state 254


state 198

    (110) body1 -> stmt . body1
    (110) body1 -> . stmt body1
    (111) body1 -> . empty
    (20) stmt -> . assignment
    (21) stmt -> . condition
    (22) stmt -> . print
    (23) stmt -> . loop
    (24) stmt -> . read
    (25) stmt -> . graphstmt
    (26) stmt -> . funCall SEMICOLON
    (27) stmt -> . return
    (164) empty -> .
    (35) assignment -> . id equals assignment3 SEMICOLON
    (101) condition -> . IF head_cond body condition1
    (70) print -> . PRINT LPARENT expression RPARENT SEMICOLON
    (18) loop -> . while
    (19) loop -> . for_v2
    (71) read -> . READ LPARENT id read1 RPARENT SEMICOLON
    (121) graphstmt -> . graphfig
    (122) graphstmt -> . graphview
    (123) graphstmt -> . graphmove
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (92) return -> . RETURN return1 SEMICOLON
    (80) id -> . aidi indice_dimensionada
    (116) while -> . while1 body
    (112) for_v2 -> . nuevo_for forBody
    (124) graphfig -> . graphfig1 SEMICOLON
    (125) graphfig -> . graphfig2 SEMICOLON
    (138) graphview -> . graphview0 SEMICOLON
    (139) graphview -> . graphview1 SEMICOLON
    (140) graphview -> . graphview2 SEMICOLON
    (130) graphmove -> . graphmove0 SEMICOLON
    (131) graphmove -> . graphmove1 SEMICOLON
    (79) aidi -> . ID
    (117) while1 -> . while_w LPARENT expression RPARENT
    (113) nuevo_for -> . FOR LPARENT id COLON for2 RPARENT
    (126) graphfig1 -> . CIRCLE unaExp
    (127) graphfig1 -> . SQUARE unaExp
    (128) graphfig1 -> . TRIANGLE unaExp
    (129) graphfig2 -> . RECTANGLE dosExp
    (141) graphview0 -> . EXIT
    (142) graphview0 -> . START_F
    (143) graphview0 -> . END_F
    (144) graphview1 -> . POINTER_COLOR unaExp
    (145) graphview1 -> . POINTER_SIZE unaExp
    (146) graphview1 -> . SPEED unaExp
    (147) graphview2 -> . POSITION dosExp
    (132) graphmove0 -> . DOWN
    (133) graphmove0 -> . UP
    (134) graphmove1 -> . GO unaExp
    (135) graphmove1 -> . LEFT unaExp
    (136) graphmove1 -> . RIGHT unaExp
    (137) graphmove1 -> . BACK unaExp
    (118) while_w -> . WHILE

    RCURBRA         reduce using rule 164 (empty -> .)
    IF              shift and go to state 55
    PRINT           shift and go to state 56
    READ            shift and go to state 59
    ID              shift and go to state 63
    RETURN          shift and go to state 208
    FOR             shift and go to state 75
    CIRCLE          shift and go to state 76
    SQUARE          shift and go to state 77
    TRIANGLE        shift and go to state 78
    RECTANGLE       shift and go to state 79
    EXIT            shift and go to state 80
    START_F         shift and go to state 81
    END_F           shift and go to state 82
    POINTER_COLOR   shift and go to state 83
    POINTER_SIZE    shift and go to state 84
    SPEED           shift and go to state 85
    POSITION        shift and go to state 86
    DOWN            shift and go to state 87
    UP              shift and go to state 88
    GO              shift and go to state 89
    LEFT            shift and go to state 90
    RIGHT           shift and go to state 91
    BACK            shift and go to state 92
    WHILE           shift and go to state 93

    stmt                           shift and go to state 198
    body1                          shift and go to state 255
    empty                          shift and go to state 199
    assignment                     shift and go to state 200
    condition                      shift and go to state 201
    print                          shift and go to state 202
    loop                           shift and go to state 203
    read                           shift and go to state 204
    graphstmt                      shift and go to state 205
    funCall                        shift and go to state 206
    return                         shift and go to state 207
    id                             shift and go to state 54
    while                          shift and go to state 57
    for_v2                         shift and go to state 58
    graphfig                       shift and go to state 60
    graphview                      shift and go to state 61
    graphmove                      shift and go to state 62
    aidi                           shift and go to state 64
    while1                         shift and go to state 65
    nuevo_for                      shift and go to state 66
    graphfig1                      shift and go to state 67
    graphfig2                      shift and go to state 68
    graphview0                     shift and go to state 69
    graphview1                     shift and go to state 70
    graphview2                     shift and go to state 71
    graphmove0                     shift and go to state 72
    graphmove1                     shift and go to state 73
    while_w                        shift and go to state 74

state 199

    (111) body1 -> empty .

    RCURBRA         reduce using rule 111 (body1 -> empty .)


state 200

    (20) stmt -> assignment .

    IF              reduce using rule 20 (stmt -> assignment .)
    PRINT           reduce using rule 20 (stmt -> assignment .)
    READ            reduce using rule 20 (stmt -> assignment .)
    ID              reduce using rule 20 (stmt -> assignment .)
    RETURN          reduce using rule 20 (stmt -> assignment .)
    FOR             reduce using rule 20 (stmt -> assignment .)
    CIRCLE          reduce using rule 20 (stmt -> assignment .)
    SQUARE          reduce using rule 20 (stmt -> assignment .)
    TRIANGLE        reduce using rule 20 (stmt -> assignment .)
    RECTANGLE       reduce using rule 20 (stmt -> assignment .)
    EXIT            reduce using rule 20 (stmt -> assignment .)
    START_F         reduce using rule 20 (stmt -> assignment .)
    END_F           reduce using rule 20 (stmt -> assignment .)
    POINTER_COLOR   reduce using rule 20 (stmt -> assignment .)
    POINTER_SIZE    reduce using rule 20 (stmt -> assignment .)
    SPEED           reduce using rule 20 (stmt -> assignment .)
    POSITION        reduce using rule 20 (stmt -> assignment .)
    DOWN            reduce using rule 20 (stmt -> assignment .)
    UP              reduce using rule 20 (stmt -> assignment .)
    GO              reduce using rule 20 (stmt -> assignment .)
    LEFT            reduce using rule 20 (stmt -> assignment .)
    RIGHT           reduce using rule 20 (stmt -> assignment .)
    BACK            reduce using rule 20 (stmt -> assignment .)
    WHILE           reduce using rule 20 (stmt -> assignment .)
    RCURBRA         reduce using rule 20 (stmt -> assignment .)


state 201

    (21) stmt -> condition .

    IF              reduce using rule 21 (stmt -> condition .)
    PRINT           reduce using rule 21 (stmt -> condition .)
    READ            reduce using rule 21 (stmt -> condition .)
    ID              reduce using rule 21 (stmt -> condition .)
    RETURN          reduce using rule 21 (stmt -> condition .)
    FOR             reduce using rule 21 (stmt -> condition .)
    CIRCLE          reduce using rule 21 (stmt -> condition .)
    SQUARE          reduce using rule 21 (stmt -> condition .)
    TRIANGLE        reduce using rule 21 (stmt -> condition .)
    RECTANGLE       reduce using rule 21 (stmt -> condition .)
    EXIT            reduce using rule 21 (stmt -> condition .)
    START_F         reduce using rule 21 (stmt -> condition .)
    END_F           reduce using rule 21 (stmt -> condition .)
    POINTER_COLOR   reduce using rule 21 (stmt -> condition .)
    POINTER_SIZE    reduce using rule 21 (stmt -> condition .)
    SPEED           reduce using rule 21 (stmt -> condition .)
    POSITION        reduce using rule 21 (stmt -> condition .)
    DOWN            reduce using rule 21 (stmt -> condition .)
    UP              reduce using rule 21 (stmt -> condition .)
    GO              reduce using rule 21 (stmt -> condition .)
    LEFT            reduce using rule 21 (stmt -> condition .)
    RIGHT           reduce using rule 21 (stmt -> condition .)
    BACK            reduce using rule 21 (stmt -> condition .)
    WHILE           reduce using rule 21 (stmt -> condition .)
    RCURBRA         reduce using rule 21 (stmt -> condition .)


state 202

    (22) stmt -> print .

    IF              reduce using rule 22 (stmt -> print .)
    PRINT           reduce using rule 22 (stmt -> print .)
    READ            reduce using rule 22 (stmt -> print .)
    ID              reduce using rule 22 (stmt -> print .)
    RETURN          reduce using rule 22 (stmt -> print .)
    FOR             reduce using rule 22 (stmt -> print .)
    CIRCLE          reduce using rule 22 (stmt -> print .)
    SQUARE          reduce using rule 22 (stmt -> print .)
    TRIANGLE        reduce using rule 22 (stmt -> print .)
    RECTANGLE       reduce using rule 22 (stmt -> print .)
    EXIT            reduce using rule 22 (stmt -> print .)
    START_F         reduce using rule 22 (stmt -> print .)
    END_F           reduce using rule 22 (stmt -> print .)
    POINTER_COLOR   reduce using rule 22 (stmt -> print .)
    POINTER_SIZE    reduce using rule 22 (stmt -> print .)
    SPEED           reduce using rule 22 (stmt -> print .)
    POSITION        reduce using rule 22 (stmt -> print .)
    DOWN            reduce using rule 22 (stmt -> print .)
    UP              reduce using rule 22 (stmt -> print .)
    GO              reduce using rule 22 (stmt -> print .)
    LEFT            reduce using rule 22 (stmt -> print .)
    RIGHT           reduce using rule 22 (stmt -> print .)
    BACK            reduce using rule 22 (stmt -> print .)
    WHILE           reduce using rule 22 (stmt -> print .)
    RCURBRA         reduce using rule 22 (stmt -> print .)


state 203

    (23) stmt -> loop .

    IF              reduce using rule 23 (stmt -> loop .)
    PRINT           reduce using rule 23 (stmt -> loop .)
    READ            reduce using rule 23 (stmt -> loop .)
    ID              reduce using rule 23 (stmt -> loop .)
    RETURN          reduce using rule 23 (stmt -> loop .)
    FOR             reduce using rule 23 (stmt -> loop .)
    CIRCLE          reduce using rule 23 (stmt -> loop .)
    SQUARE          reduce using rule 23 (stmt -> loop .)
    TRIANGLE        reduce using rule 23 (stmt -> loop .)
    RECTANGLE       reduce using rule 23 (stmt -> loop .)
    EXIT            reduce using rule 23 (stmt -> loop .)
    START_F         reduce using rule 23 (stmt -> loop .)
    END_F           reduce using rule 23 (stmt -> loop .)
    POINTER_COLOR   reduce using rule 23 (stmt -> loop .)
    POINTER_SIZE    reduce using rule 23 (stmt -> loop .)
    SPEED           reduce using rule 23 (stmt -> loop .)
    POSITION        reduce using rule 23 (stmt -> loop .)
    DOWN            reduce using rule 23 (stmt -> loop .)
    UP              reduce using rule 23 (stmt -> loop .)
    GO              reduce using rule 23 (stmt -> loop .)
    LEFT            reduce using rule 23 (stmt -> loop .)
    RIGHT           reduce using rule 23 (stmt -> loop .)
    BACK            reduce using rule 23 (stmt -> loop .)
    WHILE           reduce using rule 23 (stmt -> loop .)
    RCURBRA         reduce using rule 23 (stmt -> loop .)


state 204

    (24) stmt -> read .

    IF              reduce using rule 24 (stmt -> read .)
    PRINT           reduce using rule 24 (stmt -> read .)
    READ            reduce using rule 24 (stmt -> read .)
    ID              reduce using rule 24 (stmt -> read .)
    RETURN          reduce using rule 24 (stmt -> read .)
    FOR             reduce using rule 24 (stmt -> read .)
    CIRCLE          reduce using rule 24 (stmt -> read .)
    SQUARE          reduce using rule 24 (stmt -> read .)
    TRIANGLE        reduce using rule 24 (stmt -> read .)
    RECTANGLE       reduce using rule 24 (stmt -> read .)
    EXIT            reduce using rule 24 (stmt -> read .)
    START_F         reduce using rule 24 (stmt -> read .)
    END_F           reduce using rule 24 (stmt -> read .)
    POINTER_COLOR   reduce using rule 24 (stmt -> read .)
    POINTER_SIZE    reduce using rule 24 (stmt -> read .)
    SPEED           reduce using rule 24 (stmt -> read .)
    POSITION        reduce using rule 24 (stmt -> read .)
    DOWN            reduce using rule 24 (stmt -> read .)
    UP              reduce using rule 24 (stmt -> read .)
    GO              reduce using rule 24 (stmt -> read .)
    LEFT            reduce using rule 24 (stmt -> read .)
    RIGHT           reduce using rule 24 (stmt -> read .)
    BACK            reduce using rule 24 (stmt -> read .)
    WHILE           reduce using rule 24 (stmt -> read .)
    RCURBRA         reduce using rule 24 (stmt -> read .)


state 205

    (25) stmt -> graphstmt .

    IF              reduce using rule 25 (stmt -> graphstmt .)
    PRINT           reduce using rule 25 (stmt -> graphstmt .)
    READ            reduce using rule 25 (stmt -> graphstmt .)
    ID              reduce using rule 25 (stmt -> graphstmt .)
    RETURN          reduce using rule 25 (stmt -> graphstmt .)
    FOR             reduce using rule 25 (stmt -> graphstmt .)
    CIRCLE          reduce using rule 25 (stmt -> graphstmt .)
    SQUARE          reduce using rule 25 (stmt -> graphstmt .)
    TRIANGLE        reduce using rule 25 (stmt -> graphstmt .)
    RECTANGLE       reduce using rule 25 (stmt -> graphstmt .)
    EXIT            reduce using rule 25 (stmt -> graphstmt .)
    START_F         reduce using rule 25 (stmt -> graphstmt .)
    END_F           reduce using rule 25 (stmt -> graphstmt .)
    POINTER_COLOR   reduce using rule 25 (stmt -> graphstmt .)
    POINTER_SIZE    reduce using rule 25 (stmt -> graphstmt .)
    SPEED           reduce using rule 25 (stmt -> graphstmt .)
    POSITION        reduce using rule 25 (stmt -> graphstmt .)
    DOWN            reduce using rule 25 (stmt -> graphstmt .)
    UP              reduce using rule 25 (stmt -> graphstmt .)
    GO              reduce using rule 25 (stmt -> graphstmt .)
    LEFT            reduce using rule 25 (stmt -> graphstmt .)
    RIGHT           reduce using rule 25 (stmt -> graphstmt .)
    BACK            reduce using rule 25 (stmt -> graphstmt .)
    WHILE           reduce using rule 25 (stmt -> graphstmt .)
    RCURBRA         reduce using rule 25 (stmt -> graphstmt .)


state 206

    (26) stmt -> funCall . SEMICOLON

    SEMICOLON       shift and go to state 256


state 207

    (27) stmt -> return .

    IF              reduce using rule 27 (stmt -> return .)
    PRINT           reduce using rule 27 (stmt -> return .)
    READ            reduce using rule 27 (stmt -> return .)
    ID              reduce using rule 27 (stmt -> return .)
    RETURN          reduce using rule 27 (stmt -> return .)
    FOR             reduce using rule 27 (stmt -> return .)
    CIRCLE          reduce using rule 27 (stmt -> return .)
    SQUARE          reduce using rule 27 (stmt -> return .)
    TRIANGLE        reduce using rule 27 (stmt -> return .)
    RECTANGLE       reduce using rule 27 (stmt -> return .)
    EXIT            reduce using rule 27 (stmt -> return .)
    START_F         reduce using rule 27 (stmt -> return .)
    END_F           reduce using rule 27 (stmt -> return .)
    POINTER_COLOR   reduce using rule 27 (stmt -> return .)
    POINTER_SIZE    reduce using rule 27 (stmt -> return .)
    SPEED           reduce using rule 27 (stmt -> return .)
    POSITION        reduce using rule 27 (stmt -> return .)
    DOWN            reduce using rule 27 (stmt -> return .)
    UP              reduce using rule 27 (stmt -> return .)
    GO              reduce using rule 27 (stmt -> return .)
    LEFT            reduce using rule 27 (stmt -> return .)
    RIGHT           reduce using rule 27 (stmt -> return .)
    BACK            reduce using rule 27 (stmt -> return .)
    WHILE           reduce using rule 27 (stmt -> return .)
    RCURBRA         reduce using rule 27 (stmt -> return .)


state 208

    (92) return -> RETURN . return1 SEMICOLON
    (93) return1 -> . vcte
    (94) return1 -> . exp
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (156) term -> . factor term_o term
    (157) term -> . factor
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (164) empty -> .
    (154) openP -> . LPARENT

    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)
    LPARENT         shift and go to state 112

    return1                        shift and go to state 257
    vcte                           shift and go to state 258
    exp                            shift and go to state 259
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    term                           shift and go to state 102
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    factor                         shift and go to state 103
    empty                          shift and go to state 118
    openP                          shift and go to state 105

state 209

    (117) while1 -> while_w LPARENT expression . RPARENT

    RPARENT         shift and go to state 260


state 210

    (113) nuevo_for -> FOR LPARENT id . COLON for2 RPARENT

    COLON           shift and go to state 261


state 211

    (120) unaExp -> LPARENT exp . RPARENT

    RPARENT         shift and go to state 262


state 212

    (119) dosExp -> LPARENT exp . COMMA exp RPARENT

    COMMA           shift and go to state 263


state 213

    (53) function_t -> FUNCTION functionI function2 inicia_fun declara_vars function4 . termina_fun
    (56) termina_fun -> . RCURBRA

    RCURBRA         shift and go to state 265

    termina_fun                    shift and go to state 264

state 214

    (60) function4 -> stmt . function4
    (60) function4 -> . stmt function4
    (61) function4 -> . empty
    (20) stmt -> . assignment
    (21) stmt -> . condition
    (22) stmt -> . print
    (23) stmt -> . loop
    (24) stmt -> . read
    (25) stmt -> . graphstmt
    (26) stmt -> . funCall SEMICOLON
    (27) stmt -> . return
    (164) empty -> .
    (35) assignment -> . id equals assignment3 SEMICOLON
    (101) condition -> . IF head_cond body condition1
    (70) print -> . PRINT LPARENT expression RPARENT SEMICOLON
    (18) loop -> . while
    (19) loop -> . for_v2
    (71) read -> . READ LPARENT id read1 RPARENT SEMICOLON
    (121) graphstmt -> . graphfig
    (122) graphstmt -> . graphview
    (123) graphstmt -> . graphmove
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (92) return -> . RETURN return1 SEMICOLON
    (80) id -> . aidi indice_dimensionada
    (116) while -> . while1 body
    (112) for_v2 -> . nuevo_for forBody
    (124) graphfig -> . graphfig1 SEMICOLON
    (125) graphfig -> . graphfig2 SEMICOLON
    (138) graphview -> . graphview0 SEMICOLON
    (139) graphview -> . graphview1 SEMICOLON
    (140) graphview -> . graphview2 SEMICOLON
    (130) graphmove -> . graphmove0 SEMICOLON
    (131) graphmove -> . graphmove1 SEMICOLON
    (79) aidi -> . ID
    (117) while1 -> . while_w LPARENT expression RPARENT
    (113) nuevo_for -> . FOR LPARENT id COLON for2 RPARENT
    (126) graphfig1 -> . CIRCLE unaExp
    (127) graphfig1 -> . SQUARE unaExp
    (128) graphfig1 -> . TRIANGLE unaExp
    (129) graphfig2 -> . RECTANGLE dosExp
    (141) graphview0 -> . EXIT
    (142) graphview0 -> . START_F
    (143) graphview0 -> . END_F
    (144) graphview1 -> . POINTER_COLOR unaExp
    (145) graphview1 -> . POINTER_SIZE unaExp
    (146) graphview1 -> . SPEED unaExp
    (147) graphview2 -> . POSITION dosExp
    (132) graphmove0 -> . DOWN
    (133) graphmove0 -> . UP
    (134) graphmove1 -> . GO unaExp
    (135) graphmove1 -> . LEFT unaExp
    (136) graphmove1 -> . RIGHT unaExp
    (137) graphmove1 -> . BACK unaExp
    (118) while_w -> . WHILE

    RCURBRA         reduce using rule 164 (empty -> .)
    IF              shift and go to state 55
    PRINT           shift and go to state 56
    READ            shift and go to state 59
    ID              shift and go to state 63
    RETURN          shift and go to state 208
    FOR             shift and go to state 75
    CIRCLE          shift and go to state 76
    SQUARE          shift and go to state 77
    TRIANGLE        shift and go to state 78
    RECTANGLE       shift and go to state 79
    EXIT            shift and go to state 80
    START_F         shift and go to state 81
    END_F           shift and go to state 82
    POINTER_COLOR   shift and go to state 83
    POINTER_SIZE    shift and go to state 84
    SPEED           shift and go to state 85
    POSITION        shift and go to state 86
    DOWN            shift and go to state 87
    UP              shift and go to state 88
    GO              shift and go to state 89
    LEFT            shift and go to state 90
    RIGHT           shift and go to state 91
    BACK            shift and go to state 92
    WHILE           shift and go to state 93

    stmt                           shift and go to state 214
    function4                      shift and go to state 266
    empty                          shift and go to state 215
    assignment                     shift and go to state 200
    condition                      shift and go to state 201
    print                          shift and go to state 202
    loop                           shift and go to state 203
    read                           shift and go to state 204
    graphstmt                      shift and go to state 205
    funCall                        shift and go to state 206
    return                         shift and go to state 207
    id                             shift and go to state 54
    while                          shift and go to state 57
    for_v2                         shift and go to state 58
    graphfig                       shift and go to state 60
    graphview                      shift and go to state 61
    graphmove                      shift and go to state 62
    aidi                           shift and go to state 64
    while1                         shift and go to state 65
    nuevo_for                      shift and go to state 66
    graphfig1                      shift and go to state 67
    graphfig2                      shift and go to state 68
    graphview0                     shift and go to state 69
    graphview1                     shift and go to state 70
    graphview2                     shift and go to state 71
    graphmove0                     shift and go to state 72
    graphmove1                     shift and go to state 73
    while_w                        shift and go to state 74

state 215

    (61) function4 -> empty .

    RCURBRA         reduce using rule 61 (function4 -> empty .)


state 216

    (64) function5 -> COMMA funParam . function5
    (64) function5 -> . COMMA funParam function5
    (65) function5 -> . empty
    (164) empty -> .

    COMMA           shift and go to state 163
    RPARENT         reduce using rule 164 (empty -> .)

    function5                      shift and go to state 267
    empty                          shift and go to state 164

state 217

    (54) function_v -> FUNCTION functionV function2 inicia_fun declara_vars function9 . termina_fun
    (56) termina_fun -> . RCURBRA

    RCURBRA         shift and go to state 265

    termina_fun                    shift and go to state 268

state 218

    (62) function9 -> stmt_v . function9
    (62) function9 -> . stmt_v function9
    (63) function9 -> . empty
    (28) stmt_v -> . assignment
    (29) stmt_v -> . condition
    (30) stmt_v -> . print
    (31) stmt_v -> . loop
    (32) stmt_v -> . read
    (33) stmt_v -> . graphstmt
    (34) stmt_v -> . funCall SEMICOLON
    (164) empty -> .
    (35) assignment -> . id equals assignment3 SEMICOLON
    (101) condition -> . IF head_cond body condition1
    (70) print -> . PRINT LPARENT expression RPARENT SEMICOLON
    (18) loop -> . while
    (19) loop -> . for_v2
    (71) read -> . READ LPARENT id read1 RPARENT SEMICOLON
    (121) graphstmt -> . graphfig
    (122) graphstmt -> . graphview
    (123) graphstmt -> . graphmove
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (80) id -> . aidi indice_dimensionada
    (116) while -> . while1 body
    (112) for_v2 -> . nuevo_for forBody
    (124) graphfig -> . graphfig1 SEMICOLON
    (125) graphfig -> . graphfig2 SEMICOLON
    (138) graphview -> . graphview0 SEMICOLON
    (139) graphview -> . graphview1 SEMICOLON
    (140) graphview -> . graphview2 SEMICOLON
    (130) graphmove -> . graphmove0 SEMICOLON
    (131) graphmove -> . graphmove1 SEMICOLON
    (79) aidi -> . ID
    (117) while1 -> . while_w LPARENT expression RPARENT
    (113) nuevo_for -> . FOR LPARENT id COLON for2 RPARENT
    (126) graphfig1 -> . CIRCLE unaExp
    (127) graphfig1 -> . SQUARE unaExp
    (128) graphfig1 -> . TRIANGLE unaExp
    (129) graphfig2 -> . RECTANGLE dosExp
    (141) graphview0 -> . EXIT
    (142) graphview0 -> . START_F
    (143) graphview0 -> . END_F
    (144) graphview1 -> . POINTER_COLOR unaExp
    (145) graphview1 -> . POINTER_SIZE unaExp
    (146) graphview1 -> . SPEED unaExp
    (147) graphview2 -> . POSITION dosExp
    (132) graphmove0 -> . DOWN
    (133) graphmove0 -> . UP
    (134) graphmove1 -> . GO unaExp
    (135) graphmove1 -> . LEFT unaExp
    (136) graphmove1 -> . RIGHT unaExp
    (137) graphmove1 -> . BACK unaExp
    (118) while_w -> . WHILE

    RCURBRA         reduce using rule 164 (empty -> .)
    IF              shift and go to state 55
    PRINT           shift and go to state 56
    READ            shift and go to state 59
    ID              shift and go to state 63
    FOR             shift and go to state 75
    CIRCLE          shift and go to state 76
    SQUARE          shift and go to state 77
    TRIANGLE        shift and go to state 78
    RECTANGLE       shift and go to state 79
    EXIT            shift and go to state 80
    START_F         shift and go to state 81
    END_F           shift and go to state 82
    POINTER_COLOR   shift and go to state 83
    POINTER_SIZE    shift and go to state 84
    SPEED           shift and go to state 85
    POSITION        shift and go to state 86
    DOWN            shift and go to state 87
    UP              shift and go to state 88
    GO              shift and go to state 89
    LEFT            shift and go to state 90
    RIGHT           shift and go to state 91
    BACK            shift and go to state 92
    WHILE           shift and go to state 93

    stmt_v                         shift and go to state 218
    function9                      shift and go to state 269
    empty                          shift and go to state 219
    assignment                     shift and go to state 47
    condition                      shift and go to state 48
    print                          shift and go to state 49
    loop                           shift and go to state 50
    read                           shift and go to state 51
    graphstmt                      shift and go to state 52
    funCall                        shift and go to state 53
    id                             shift and go to state 54
    while                          shift and go to state 57
    for_v2                         shift and go to state 58
    graphfig                       shift and go to state 60
    graphview                      shift and go to state 61
    graphmove                      shift and go to state 62
    aidi                           shift and go to state 64
    while1                         shift and go to state 65
    nuevo_for                      shift and go to state 66
    graphfig1                      shift and go to state 67
    graphfig2                      shift and go to state 68
    graphview0                     shift and go to state 69
    graphview1                     shift and go to state 70
    graphview2                     shift and go to state 71
    graphmove0                     shift and go to state 72
    graphmove1                     shift and go to state 73
    while_w                        shift and go to state 74

state 219

    (63) function9 -> empty .

    RCURBRA         reduce using rule 63 (function9 -> empty .)


state 220

    (151) exp -> term exp_o exp .

    SEMICOLON       reduce using rule 151 (exp -> term exp_o exp .)
    GREATERT        reduce using rule 151 (exp -> term exp_o exp .)
    MINORT          reduce using rule 151 (exp -> term exp_o exp .)
    GREATEREQT      reduce using rule 151 (exp -> term exp_o exp .)
    MINOREQT        reduce using rule 151 (exp -> term exp_o exp .)
    DIFFERENT       reduce using rule 151 (exp -> term exp_o exp .)
    ISEQUAL         reduce using rule 151 (exp -> term exp_o exp .)
    RPARENT         reduce using rule 151 (exp -> term exp_o exp .)
    COMMA           reduce using rule 151 (exp -> term exp_o exp .)
    RBRACK          reduce using rule 151 (exp -> term exp_o exp .)


state 221

    (156) term -> factor term_o term .

    PLUS            reduce using rule 156 (term -> factor term_o term .)
    MINUS           reduce using rule 156 (term -> factor term_o term .)
    SEMICOLON       reduce using rule 156 (term -> factor term_o term .)
    GREATERT        reduce using rule 156 (term -> factor term_o term .)
    MINORT          reduce using rule 156 (term -> factor term_o term .)
    GREATEREQT      reduce using rule 156 (term -> factor term_o term .)
    MINOREQT        reduce using rule 156 (term -> factor term_o term .)
    DIFFERENT       reduce using rule 156 (term -> factor term_o term .)
    ISEQUAL         reduce using rule 156 (term -> factor term_o term .)
    RPARENT         reduce using rule 156 (term -> factor term_o term .)
    COMMA           reduce using rule 156 (term -> factor term_o term .)
    RBRACK          reduce using rule 156 (term -> factor term_o term .)


state 222

    (161) factor -> openP expression closeP .

    MULT            reduce using rule 161 (factor -> openP expression closeP .)
    DIVIDE          reduce using rule 161 (factor -> openP expression closeP .)
    PLUS            reduce using rule 161 (factor -> openP expression closeP .)
    MINUS           reduce using rule 161 (factor -> openP expression closeP .)
    SEMICOLON       reduce using rule 161 (factor -> openP expression closeP .)
    GREATERT        reduce using rule 161 (factor -> openP expression closeP .)
    MINORT          reduce using rule 161 (factor -> openP expression closeP .)
    GREATEREQT      reduce using rule 161 (factor -> openP expression closeP .)
    MINOREQT        reduce using rule 161 (factor -> openP expression closeP .)
    DIFFERENT       reduce using rule 161 (factor -> openP expression closeP .)
    ISEQUAL         reduce using rule 161 (factor -> openP expression closeP .)
    RPARENT         reduce using rule 161 (factor -> openP expression closeP .)
    COMMA           reduce using rule 161 (factor -> openP expression closeP .)
    RBRACK          reduce using rule 161 (factor -> openP expression closeP .)


state 223

    (155) closeP -> RPARENT .

    MULT            reduce using rule 155 (closeP -> RPARENT .)
    DIVIDE          reduce using rule 155 (closeP -> RPARENT .)
    PLUS            reduce using rule 155 (closeP -> RPARENT .)
    MINUS           reduce using rule 155 (closeP -> RPARENT .)
    SEMICOLON       reduce using rule 155 (closeP -> RPARENT .)
    GREATERT        reduce using rule 155 (closeP -> RPARENT .)
    MINORT          reduce using rule 155 (closeP -> RPARENT .)
    GREATEREQT      reduce using rule 155 (closeP -> RPARENT .)
    MINOREQT        reduce using rule 155 (closeP -> RPARENT .)
    DIFFERENT       reduce using rule 155 (closeP -> RPARENT .)
    ISEQUAL         reduce using rule 155 (closeP -> RPARENT .)
    RPARENT         reduce using rule 155 (closeP -> RPARENT .)
    COMMA           reduce using rule 155 (closeP -> RPARENT .)
    RBRACK          reduce using rule 155 (closeP -> RPARENT .)


state 224

    (148) expression -> exp loper . exp
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    exp                            shift and go to state 270
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 225

    (95) loper -> GREATERT .

    LPARENT         reduce using rule 95 (loper -> GREATERT .)
    CTE_STRING      reduce using rule 95 (loper -> GREATERT .)
    ID              reduce using rule 95 (loper -> GREATERT .)
    LBRACK          reduce using rule 95 (loper -> GREATERT .)
    MINUS           reduce using rule 95 (loper -> GREATERT .)
    CTE_INT         reduce using rule 95 (loper -> GREATERT .)
    CTE_FLOAT       reduce using rule 95 (loper -> GREATERT .)


state 226

    (96) loper -> MINORT .

    LPARENT         reduce using rule 96 (loper -> MINORT .)
    CTE_STRING      reduce using rule 96 (loper -> MINORT .)
    ID              reduce using rule 96 (loper -> MINORT .)
    LBRACK          reduce using rule 96 (loper -> MINORT .)
    MINUS           reduce using rule 96 (loper -> MINORT .)
    CTE_INT         reduce using rule 96 (loper -> MINORT .)
    CTE_FLOAT       reduce using rule 96 (loper -> MINORT .)


state 227

    (97) loper -> GREATEREQT .

    LPARENT         reduce using rule 97 (loper -> GREATEREQT .)
    CTE_STRING      reduce using rule 97 (loper -> GREATEREQT .)
    ID              reduce using rule 97 (loper -> GREATEREQT .)
    LBRACK          reduce using rule 97 (loper -> GREATEREQT .)
    MINUS           reduce using rule 97 (loper -> GREATEREQT .)
    CTE_INT         reduce using rule 97 (loper -> GREATEREQT .)
    CTE_FLOAT       reduce using rule 97 (loper -> GREATEREQT .)


state 228

    (98) loper -> MINOREQT .

    LPARENT         reduce using rule 98 (loper -> MINOREQT .)
    CTE_STRING      reduce using rule 98 (loper -> MINOREQT .)
    ID              reduce using rule 98 (loper -> MINOREQT .)
    LBRACK          reduce using rule 98 (loper -> MINOREQT .)
    MINUS           reduce using rule 98 (loper -> MINOREQT .)
    CTE_INT         reduce using rule 98 (loper -> MINOREQT .)
    CTE_FLOAT       reduce using rule 98 (loper -> MINOREQT .)


state 229

    (99) loper -> DIFFERENT .

    LPARENT         reduce using rule 99 (loper -> DIFFERENT .)
    CTE_STRING      reduce using rule 99 (loper -> DIFFERENT .)
    ID              reduce using rule 99 (loper -> DIFFERENT .)
    LBRACK          reduce using rule 99 (loper -> DIFFERENT .)
    MINUS           reduce using rule 99 (loper -> DIFFERENT .)
    CTE_INT         reduce using rule 99 (loper -> DIFFERENT .)
    CTE_FLOAT       reduce using rule 99 (loper -> DIFFERENT .)


state 230

    (100) loper -> ISEQUAL .

    LPARENT         reduce using rule 100 (loper -> ISEQUAL .)
    CTE_STRING      reduce using rule 100 (loper -> ISEQUAL .)
    ID              reduce using rule 100 (loper -> ISEQUAL .)
    LBRACK          reduce using rule 100 (loper -> ISEQUAL .)
    MINUS           reduce using rule 100 (loper -> ISEQUAL .)
    CTE_INT         reduce using rule 100 (loper -> ISEQUAL .)
    CTE_FLOAT       reduce using rule 100 (loper -> ISEQUAL .)


state 231

    (44) vectormatriz -> LBRACK vm1 RBRACK .

    MULT            reduce using rule 44 (vectormatriz -> LBRACK vm1 RBRACK .)
    DIVIDE          reduce using rule 44 (vectormatriz -> LBRACK vm1 RBRACK .)
    PLUS            reduce using rule 44 (vectormatriz -> LBRACK vm1 RBRACK .)
    MINUS           reduce using rule 44 (vectormatriz -> LBRACK vm1 RBRACK .)
    SEMICOLON       reduce using rule 44 (vectormatriz -> LBRACK vm1 RBRACK .)
    GREATERT        reduce using rule 44 (vectormatriz -> LBRACK vm1 RBRACK .)
    MINORT          reduce using rule 44 (vectormatriz -> LBRACK vm1 RBRACK .)
    GREATEREQT      reduce using rule 44 (vectormatriz -> LBRACK vm1 RBRACK .)
    MINOREQT        reduce using rule 44 (vectormatriz -> LBRACK vm1 RBRACK .)
    DIFFERENT       reduce using rule 44 (vectormatriz -> LBRACK vm1 RBRACK .)
    ISEQUAL         reduce using rule 44 (vectormatriz -> LBRACK vm1 RBRACK .)
    RPARENT         reduce using rule 44 (vectormatriz -> LBRACK vm1 RBRACK .)
    COMMA           reduce using rule 44 (vectormatriz -> LBRACK vm1 RBRACK .)
    RBRACK          reduce using rule 44 (vectormatriz -> LBRACK vm1 RBRACK .)


state 232

    (46) vm1 -> LBRACK vm2 RBRACK . COMMA vm1
    (47) vm1 -> LBRACK vm2 RBRACK .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 271
    MULT            reduce using rule 47 (vm1 -> LBRACK vm2 RBRACK .)
    DIVIDE          reduce using rule 47 (vm1 -> LBRACK vm2 RBRACK .)
    PLUS            reduce using rule 47 (vm1 -> LBRACK vm2 RBRACK .)
    MINUS           reduce using rule 47 (vm1 -> LBRACK vm2 RBRACK .)
    SEMICOLON       reduce using rule 47 (vm1 -> LBRACK vm2 RBRACK .)
    GREATERT        reduce using rule 47 (vm1 -> LBRACK vm2 RBRACK .)
    MINORT          reduce using rule 47 (vm1 -> LBRACK vm2 RBRACK .)
    GREATEREQT      reduce using rule 47 (vm1 -> LBRACK vm2 RBRACK .)
    MINOREQT        reduce using rule 47 (vm1 -> LBRACK vm2 RBRACK .)
    DIFFERENT       reduce using rule 47 (vm1 -> LBRACK vm2 RBRACK .)
    ISEQUAL         reduce using rule 47 (vm1 -> LBRACK vm2 RBRACK .)
    RPARENT         reduce using rule 47 (vm1 -> LBRACK vm2 RBRACK .)
    RBRACK          reduce using rule 47 (vm1 -> LBRACK vm2 RBRACK .)

  ! COMMA           [ reduce using rule 47 (vm1 -> LBRACK vm2 RBRACK .) ]


state 233

    (48) vm2 -> exp COMMA . vm2
    (48) vm2 -> . exp COMMA vm2
    (49) vm2 -> . exp
    (50) vm2 -> . empty
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (164) empty -> .
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK

    RBRACK          reduce using rule 164 (empty -> .)
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)
    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117

    exp                            shift and go to state 181
    vm2                            shift and go to state 272
    empty                          shift and go to state 182
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116

state 234

    (16) dimensionada -> LBRACK CTE_INT RBRACK LBRACK CTE_INT . RBRACK

    RBRACK          shift and go to state 273


state 235

    (35) assignment -> id equals assignment3 SEMICOLON .

    IF              reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    PRINT           reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    READ            reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    ID              reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    FOR             reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    CIRCLE          reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    SQUARE          reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    TRIANGLE        reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    RECTANGLE       reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    EXIT            reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    START_F         reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    END_F           reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    POINTER_COLOR   reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    POINTER_SIZE    reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    SPEED           reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    POSITION        reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    DOWN            reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    UP              reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    GO              reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    LEFT            reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    RIGHT           reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    BACK            reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    WHILE           reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    RCURBRA         reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)
    RETURN          reduce using rule 35 (assignment -> id equals assignment3 SEMICOLON .)


state 236

    (101) condition -> IF head_cond body condition1 .

    IF              reduce using rule 101 (condition -> IF head_cond body condition1 .)
    PRINT           reduce using rule 101 (condition -> IF head_cond body condition1 .)
    READ            reduce using rule 101 (condition -> IF head_cond body condition1 .)
    ID              reduce using rule 101 (condition -> IF head_cond body condition1 .)
    FOR             reduce using rule 101 (condition -> IF head_cond body condition1 .)
    CIRCLE          reduce using rule 101 (condition -> IF head_cond body condition1 .)
    SQUARE          reduce using rule 101 (condition -> IF head_cond body condition1 .)
    TRIANGLE        reduce using rule 101 (condition -> IF head_cond body condition1 .)
    RECTANGLE       reduce using rule 101 (condition -> IF head_cond body condition1 .)
    EXIT            reduce using rule 101 (condition -> IF head_cond body condition1 .)
    START_F         reduce using rule 101 (condition -> IF head_cond body condition1 .)
    END_F           reduce using rule 101 (condition -> IF head_cond body condition1 .)
    POINTER_COLOR   reduce using rule 101 (condition -> IF head_cond body condition1 .)
    POINTER_SIZE    reduce using rule 101 (condition -> IF head_cond body condition1 .)
    SPEED           reduce using rule 101 (condition -> IF head_cond body condition1 .)
    POSITION        reduce using rule 101 (condition -> IF head_cond body condition1 .)
    DOWN            reduce using rule 101 (condition -> IF head_cond body condition1 .)
    UP              reduce using rule 101 (condition -> IF head_cond body condition1 .)
    GO              reduce using rule 101 (condition -> IF head_cond body condition1 .)
    LEFT            reduce using rule 101 (condition -> IF head_cond body condition1 .)
    RIGHT           reduce using rule 101 (condition -> IF head_cond body condition1 .)
    BACK            reduce using rule 101 (condition -> IF head_cond body condition1 .)
    WHILE           reduce using rule 101 (condition -> IF head_cond body condition1 .)
    RCURBRA         reduce using rule 101 (condition -> IF head_cond body condition1 .)
    RETURN          reduce using rule 101 (condition -> IF head_cond body condition1 .)


state 237

    (102) condition1 -> elseif . head_cond body condition1
    (107) head_cond -> . LPARENT expression close_condition

    LPARENT         shift and go to state 125

    head_cond                      shift and go to state 274

state 238

    (103) condition1 -> else . body
    (108) body -> . LCURBRA body1 RCURBRA

    LCURBRA         shift and go to state 134

    body                           shift and go to state 275

state 239

    (104) condition1 -> empty .

    IF              reduce using rule 104 (condition1 -> empty .)
    PRINT           reduce using rule 104 (condition1 -> empty .)
    READ            reduce using rule 104 (condition1 -> empty .)
    ID              reduce using rule 104 (condition1 -> empty .)
    FOR             reduce using rule 104 (condition1 -> empty .)
    CIRCLE          reduce using rule 104 (condition1 -> empty .)
    SQUARE          reduce using rule 104 (condition1 -> empty .)
    TRIANGLE        reduce using rule 104 (condition1 -> empty .)
    RECTANGLE       reduce using rule 104 (condition1 -> empty .)
    EXIT            reduce using rule 104 (condition1 -> empty .)
    START_F         reduce using rule 104 (condition1 -> empty .)
    END_F           reduce using rule 104 (condition1 -> empty .)
    POINTER_COLOR   reduce using rule 104 (condition1 -> empty .)
    POINTER_SIZE    reduce using rule 104 (condition1 -> empty .)
    SPEED           reduce using rule 104 (condition1 -> empty .)
    POSITION        reduce using rule 104 (condition1 -> empty .)
    DOWN            reduce using rule 104 (condition1 -> empty .)
    UP              reduce using rule 104 (condition1 -> empty .)
    GO              reduce using rule 104 (condition1 -> empty .)
    LEFT            reduce using rule 104 (condition1 -> empty .)
    RIGHT           reduce using rule 104 (condition1 -> empty .)
    BACK            reduce using rule 104 (condition1 -> empty .)
    WHILE           reduce using rule 104 (condition1 -> empty .)
    RCURBRA         reduce using rule 104 (condition1 -> empty .)
    RETURN          reduce using rule 104 (condition1 -> empty .)


state 240

    (105) elseif -> ELSEIF .

    LPARENT         reduce using rule 105 (elseif -> ELSEIF .)


state 241

    (106) else -> ELSE .

    LCURBRA         reduce using rule 106 (else -> ELSE .)


state 242

    (107) head_cond -> LPARENT expression close_condition .

    LCURBRA         reduce using rule 107 (head_cond -> LPARENT expression close_condition .)


state 243

    (109) close_condition -> RPARENT .

    LCURBRA         reduce using rule 109 (close_condition -> RPARENT .)


state 244

    (70) print -> PRINT LPARENT expression RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 276


state 245

    (71) read -> READ LPARENT id read1 . RPARENT SEMICOLON

    RPARENT         shift and go to state 277


state 246

    (72) read1 -> LBRACK . exp RBRACK LBRACK exp RBRACK
    (73) read1 -> LBRACK . exp RBRACK
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    exp                            shift and go to state 278
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 247

    (74) read1 -> empty .

    RPARENT         reduce using rule 74 (read1 -> empty .)


state 248

    (81) funCall -> ID iniciaFunCall funCall2 terminaFunCall .

    SEMICOLON       reduce using rule 81 (funCall -> ID iniciaFunCall funCall2 terminaFunCall .)
    MULT            reduce using rule 81 (funCall -> ID iniciaFunCall funCall2 terminaFunCall .)
    DIVIDE          reduce using rule 81 (funCall -> ID iniciaFunCall funCall2 terminaFunCall .)
    PLUS            reduce using rule 81 (funCall -> ID iniciaFunCall funCall2 terminaFunCall .)
    MINUS           reduce using rule 81 (funCall -> ID iniciaFunCall funCall2 terminaFunCall .)
    GREATERT        reduce using rule 81 (funCall -> ID iniciaFunCall funCall2 terminaFunCall .)
    MINORT          reduce using rule 81 (funCall -> ID iniciaFunCall funCall2 terminaFunCall .)
    GREATEREQT      reduce using rule 81 (funCall -> ID iniciaFunCall funCall2 terminaFunCall .)
    MINOREQT        reduce using rule 81 (funCall -> ID iniciaFunCall funCall2 terminaFunCall .)
    DIFFERENT       reduce using rule 81 (funCall -> ID iniciaFunCall funCall2 terminaFunCall .)
    ISEQUAL         reduce using rule 81 (funCall -> ID iniciaFunCall funCall2 terminaFunCall .)
    RPARENT         reduce using rule 81 (funCall -> ID iniciaFunCall funCall2 terminaFunCall .)
    COMMA           reduce using rule 81 (funCall -> ID iniciaFunCall funCall2 terminaFunCall .)
    RBRACK          reduce using rule 81 (funCall -> ID iniciaFunCall funCall2 terminaFunCall .)


state 249

    (83) terminaFunCall -> RPARENT .

    SEMICOLON       reduce using rule 83 (terminaFunCall -> RPARENT .)
    MULT            reduce using rule 83 (terminaFunCall -> RPARENT .)
    DIVIDE          reduce using rule 83 (terminaFunCall -> RPARENT .)
    PLUS            reduce using rule 83 (terminaFunCall -> RPARENT .)
    MINUS           reduce using rule 83 (terminaFunCall -> RPARENT .)
    GREATERT        reduce using rule 83 (terminaFunCall -> RPARENT .)
    MINORT          reduce using rule 83 (terminaFunCall -> RPARENT .)
    GREATEREQT      reduce using rule 83 (terminaFunCall -> RPARENT .)
    MINOREQT        reduce using rule 83 (terminaFunCall -> RPARENT .)
    DIFFERENT       reduce using rule 83 (terminaFunCall -> RPARENT .)
    ISEQUAL         reduce using rule 83 (terminaFunCall -> RPARENT .)
    RPARENT         reduce using rule 83 (terminaFunCall -> RPARENT .)
    COMMA           reduce using rule 83 (terminaFunCall -> RPARENT .)
    RBRACK          reduce using rule 83 (terminaFunCall -> RPARENT .)


state 250

    (84) funCall2 -> funCallParam funCall3 .

    RPARENT         reduce using rule 84 (funCall2 -> funCallParam funCall3 .)


state 251

    (86) funCall3 -> COMMA . funCallParam funCall3
    (88) funCallParam -> . exp
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    funCallParam                   shift and go to state 279
    exp                            shift and go to state 195
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 252

    (87) funCall3 -> empty .

    RPARENT         reduce using rule 87 (funCall3 -> empty .)


state 253

    (76) indice_dimensionada -> LBRACK exp RBRACK . LBRACK exp RBRACK
    (77) indice_dimensionada -> LBRACK exp RBRACK .

  ! shift/reduce conflict for LBRACK resolved as shift
    LBRACK          shift and go to state 280
    EQUAL           reduce using rule 77 (indice_dimensionada -> LBRACK exp RBRACK .)
    MULT            reduce using rule 77 (indice_dimensionada -> LBRACK exp RBRACK .)
    DIVIDE          reduce using rule 77 (indice_dimensionada -> LBRACK exp RBRACK .)
    PLUS            reduce using rule 77 (indice_dimensionada -> LBRACK exp RBRACK .)
    MINUS           reduce using rule 77 (indice_dimensionada -> LBRACK exp RBRACK .)
    SEMICOLON       reduce using rule 77 (indice_dimensionada -> LBRACK exp RBRACK .)
    GREATERT        reduce using rule 77 (indice_dimensionada -> LBRACK exp RBRACK .)
    MINORT          reduce using rule 77 (indice_dimensionada -> LBRACK exp RBRACK .)
    GREATEREQT      reduce using rule 77 (indice_dimensionada -> LBRACK exp RBRACK .)
    MINOREQT        reduce using rule 77 (indice_dimensionada -> LBRACK exp RBRACK .)
    DIFFERENT       reduce using rule 77 (indice_dimensionada -> LBRACK exp RBRACK .)
    ISEQUAL         reduce using rule 77 (indice_dimensionada -> LBRACK exp RBRACK .)
    RPARENT         reduce using rule 77 (indice_dimensionada -> LBRACK exp RBRACK .)
    COMMA           reduce using rule 77 (indice_dimensionada -> LBRACK exp RBRACK .)
    RBRACK          reduce using rule 77 (indice_dimensionada -> LBRACK exp RBRACK .)
    COLON           reduce using rule 77 (indice_dimensionada -> LBRACK exp RBRACK .)

  ! LBRACK          [ reduce using rule 77 (indice_dimensionada -> LBRACK exp RBRACK .) ]


state 254

    (108) body -> LCURBRA body1 RCURBRA .

    IF              reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    PRINT           reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    READ            reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    ID              reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    FOR             reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    CIRCLE          reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    SQUARE          reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    TRIANGLE        reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    RECTANGLE       reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    EXIT            reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    START_F         reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    END_F           reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    POINTER_COLOR   reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    POINTER_SIZE    reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    SPEED           reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    POSITION        reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    DOWN            reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    UP              reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    GO              reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    LEFT            reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    RIGHT           reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    BACK            reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    WHILE           reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    RCURBRA         reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    RETURN          reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    ELSEIF          reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)
    ELSE            reduce using rule 108 (body -> LCURBRA body1 RCURBRA .)


state 255

    (110) body1 -> stmt body1 .

    RCURBRA         reduce using rule 110 (body1 -> stmt body1 .)


state 256

    (26) stmt -> funCall SEMICOLON .

    IF              reduce using rule 26 (stmt -> funCall SEMICOLON .)
    PRINT           reduce using rule 26 (stmt -> funCall SEMICOLON .)
    READ            reduce using rule 26 (stmt -> funCall SEMICOLON .)
    ID              reduce using rule 26 (stmt -> funCall SEMICOLON .)
    RETURN          reduce using rule 26 (stmt -> funCall SEMICOLON .)
    FOR             reduce using rule 26 (stmt -> funCall SEMICOLON .)
    CIRCLE          reduce using rule 26 (stmt -> funCall SEMICOLON .)
    SQUARE          reduce using rule 26 (stmt -> funCall SEMICOLON .)
    TRIANGLE        reduce using rule 26 (stmt -> funCall SEMICOLON .)
    RECTANGLE       reduce using rule 26 (stmt -> funCall SEMICOLON .)
    EXIT            reduce using rule 26 (stmt -> funCall SEMICOLON .)
    START_F         reduce using rule 26 (stmt -> funCall SEMICOLON .)
    END_F           reduce using rule 26 (stmt -> funCall SEMICOLON .)
    POINTER_COLOR   reduce using rule 26 (stmt -> funCall SEMICOLON .)
    POINTER_SIZE    reduce using rule 26 (stmt -> funCall SEMICOLON .)
    SPEED           reduce using rule 26 (stmt -> funCall SEMICOLON .)
    POSITION        reduce using rule 26 (stmt -> funCall SEMICOLON .)
    DOWN            reduce using rule 26 (stmt -> funCall SEMICOLON .)
    UP              reduce using rule 26 (stmt -> funCall SEMICOLON .)
    GO              reduce using rule 26 (stmt -> funCall SEMICOLON .)
    LEFT            reduce using rule 26 (stmt -> funCall SEMICOLON .)
    RIGHT           reduce using rule 26 (stmt -> funCall SEMICOLON .)
    BACK            reduce using rule 26 (stmt -> funCall SEMICOLON .)
    WHILE           reduce using rule 26 (stmt -> funCall SEMICOLON .)
    RCURBRA         reduce using rule 26 (stmt -> funCall SEMICOLON .)


state 257

    (92) return -> RETURN return1 . SEMICOLON

    SEMICOLON       shift and go to state 281


state 258

    (93) return1 -> vcte .
    (160) factor -> vcte .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 93 (return1 -> vcte .)
    SEMICOLON       reduce using rule 93 (return1 -> vcte .)
    MULT            reduce using rule 160 (factor -> vcte .)
    DIVIDE          reduce using rule 160 (factor -> vcte .)
    PLUS            reduce using rule 160 (factor -> vcte .)
    MINUS           reduce using rule 160 (factor -> vcte .)

  ! SEMICOLON       [ reduce using rule 160 (factor -> vcte .) ]


state 259

    (94) return1 -> exp .

    SEMICOLON       reduce using rule 94 (return1 -> exp .)


state 260

    (117) while1 -> while_w LPARENT expression RPARENT .

    LCURBRA         reduce using rule 117 (while1 -> while_w LPARENT expression RPARENT .)


state 261

    (113) nuevo_for -> FOR LPARENT id COLON . for2 RPARENT
    (114) for2 -> . exp
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    id                             shift and go to state 109
    for2                           shift and go to state 282
    exp                            shift and go to state 283
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 262

    (120) unaExp -> LPARENT exp RPARENT .

    SEMICOLON       reduce using rule 120 (unaExp -> LPARENT exp RPARENT .)


state 263

    (119) dosExp -> LPARENT exp COMMA . exp RPARENT
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    exp                            shift and go to state 284
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 264

    (53) function_t -> FUNCTION functionI function2 inicia_fun declara_vars function4 termina_fun .

    FUNCTION        reduce using rule 53 (function_t -> FUNCTION functionI function2 inicia_fun declara_vars function4 termina_fun .)
    MAINF           reduce using rule 53 (function_t -> FUNCTION functionI function2 inicia_fun declara_vars function4 termina_fun .)


state 265

    (56) termina_fun -> RCURBRA .

    FUNCTION        reduce using rule 56 (termina_fun -> RCURBRA .)
    MAINF           reduce using rule 56 (termina_fun -> RCURBRA .)


state 266

    (60) function4 -> stmt function4 .

    RCURBRA         reduce using rule 60 (function4 -> stmt function4 .)


state 267

    (64) function5 -> COMMA funParam function5 .

    RPARENT         reduce using rule 64 (function5 -> COMMA funParam function5 .)


state 268

    (54) function_v -> FUNCTION functionV function2 inicia_fun declara_vars function9 termina_fun .

    FUNCTION        reduce using rule 54 (function_v -> FUNCTION functionV function2 inicia_fun declara_vars function9 termina_fun .)
    MAINF           reduce using rule 54 (function_v -> FUNCTION functionV function2 inicia_fun declara_vars function9 termina_fun .)


state 269

    (62) function9 -> stmt_v function9 .

    RCURBRA         reduce using rule 62 (function9 -> stmt_v function9 .)


state 270

    (148) expression -> exp loper exp .

    RPARENT         reduce using rule 148 (expression -> exp loper exp .)


state 271

    (46) vm1 -> LBRACK vm2 RBRACK COMMA . vm1
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK

    LBRACK          shift and go to state 285

    vm1                            shift and go to state 286

state 272

    (48) vm2 -> exp COMMA vm2 .

    RBRACK          reduce using rule 48 (vm2 -> exp COMMA vm2 .)


state 273

    (16) dimensionada -> LBRACK CTE_INT RBRACK LBRACK CTE_INT RBRACK .

    SEMICOLON       reduce using rule 16 (dimensionada -> LBRACK CTE_INT RBRACK LBRACK CTE_INT RBRACK .)
    EQUAL           reduce using rule 16 (dimensionada -> LBRACK CTE_INT RBRACK LBRACK CTE_INT RBRACK .)


state 274

    (102) condition1 -> elseif head_cond . body condition1
    (108) body -> . LCURBRA body1 RCURBRA

    LCURBRA         shift and go to state 134

    body                           shift and go to state 287

state 275

    (103) condition1 -> else body .

    IF              reduce using rule 103 (condition1 -> else body .)
    PRINT           reduce using rule 103 (condition1 -> else body .)
    READ            reduce using rule 103 (condition1 -> else body .)
    ID              reduce using rule 103 (condition1 -> else body .)
    FOR             reduce using rule 103 (condition1 -> else body .)
    CIRCLE          reduce using rule 103 (condition1 -> else body .)
    SQUARE          reduce using rule 103 (condition1 -> else body .)
    TRIANGLE        reduce using rule 103 (condition1 -> else body .)
    RECTANGLE       reduce using rule 103 (condition1 -> else body .)
    EXIT            reduce using rule 103 (condition1 -> else body .)
    START_F         reduce using rule 103 (condition1 -> else body .)
    END_F           reduce using rule 103 (condition1 -> else body .)
    POINTER_COLOR   reduce using rule 103 (condition1 -> else body .)
    POINTER_SIZE    reduce using rule 103 (condition1 -> else body .)
    SPEED           reduce using rule 103 (condition1 -> else body .)
    POSITION        reduce using rule 103 (condition1 -> else body .)
    DOWN            reduce using rule 103 (condition1 -> else body .)
    UP              reduce using rule 103 (condition1 -> else body .)
    GO              reduce using rule 103 (condition1 -> else body .)
    LEFT            reduce using rule 103 (condition1 -> else body .)
    RIGHT           reduce using rule 103 (condition1 -> else body .)
    BACK            reduce using rule 103 (condition1 -> else body .)
    WHILE           reduce using rule 103 (condition1 -> else body .)
    RCURBRA         reduce using rule 103 (condition1 -> else body .)
    RETURN          reduce using rule 103 (condition1 -> else body .)


state 276

    (70) print -> PRINT LPARENT expression RPARENT SEMICOLON .

    IF              reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    PRINT           reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    READ            reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    ID              reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    FOR             reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    CIRCLE          reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    SQUARE          reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    TRIANGLE        reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    RECTANGLE       reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    EXIT            reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    START_F         reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    END_F           reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    POINTER_COLOR   reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    POINTER_SIZE    reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    SPEED           reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    POSITION        reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    DOWN            reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    UP              reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    GO              reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    LEFT            reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    RIGHT           reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    BACK            reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    WHILE           reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    RCURBRA         reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)
    RETURN          reduce using rule 70 (print -> PRINT LPARENT expression RPARENT SEMICOLON .)


state 277

    (71) read -> READ LPARENT id read1 RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 288


state 278

    (72) read1 -> LBRACK exp . RBRACK LBRACK exp RBRACK
    (73) read1 -> LBRACK exp . RBRACK

    RBRACK          shift and go to state 289


state 279

    (86) funCall3 -> COMMA funCallParam . funCall3
    (86) funCall3 -> . COMMA funCallParam funCall3
    (87) funCall3 -> . empty
    (164) empty -> .

    COMMA           shift and go to state 251
    RPARENT         reduce using rule 164 (empty -> .)

    funCall3                       shift and go to state 290
    empty                          shift and go to state 252

state 280

    (76) indice_dimensionada -> LBRACK exp RBRACK LBRACK . exp RBRACK
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    exp                            shift and go to state 291
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 281

    (92) return -> RETURN return1 SEMICOLON .

    IF              reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    PRINT           reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    READ            reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    ID              reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    RETURN          reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    FOR             reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    CIRCLE          reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    SQUARE          reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    TRIANGLE        reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    RECTANGLE       reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    EXIT            reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    START_F         reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    END_F           reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    POINTER_COLOR   reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    POINTER_SIZE    reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    SPEED           reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    POSITION        reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    DOWN            reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    UP              reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    GO              reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    LEFT            reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    RIGHT           reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    BACK            reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    WHILE           reduce using rule 92 (return -> RETURN return1 SEMICOLON .)
    RCURBRA         reduce using rule 92 (return -> RETURN return1 SEMICOLON .)


state 282

    (113) nuevo_for -> FOR LPARENT id COLON for2 . RPARENT

    RPARENT         shift and go to state 292


state 283

    (114) for2 -> exp .

    RPARENT         reduce using rule 114 (for2 -> exp .)


state 284

    (119) dosExp -> LPARENT exp COMMA exp . RPARENT

    RPARENT         shift and go to state 293


state 285

    (46) vm1 -> LBRACK . vm2 RBRACK COMMA vm1
    (47) vm1 -> LBRACK . vm2 RBRACK
    (48) vm2 -> . exp COMMA vm2
    (49) vm2 -> . exp
    (50) vm2 -> . empty
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (164) empty -> .
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK

    RBRACK          reduce using rule 164 (empty -> .)
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)
    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117

    vm2                            shift and go to state 180
    vm1                            shift and go to state 116
    exp                            shift and go to state 181
    empty                          shift and go to state 182
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64

state 286

    (46) vm1 -> LBRACK vm2 RBRACK COMMA vm1 .

    MULT            reduce using rule 46 (vm1 -> LBRACK vm2 RBRACK COMMA vm1 .)
    DIVIDE          reduce using rule 46 (vm1 -> LBRACK vm2 RBRACK COMMA vm1 .)
    PLUS            reduce using rule 46 (vm1 -> LBRACK vm2 RBRACK COMMA vm1 .)
    MINUS           reduce using rule 46 (vm1 -> LBRACK vm2 RBRACK COMMA vm1 .)
    SEMICOLON       reduce using rule 46 (vm1 -> LBRACK vm2 RBRACK COMMA vm1 .)
    GREATERT        reduce using rule 46 (vm1 -> LBRACK vm2 RBRACK COMMA vm1 .)
    MINORT          reduce using rule 46 (vm1 -> LBRACK vm2 RBRACK COMMA vm1 .)
    GREATEREQT      reduce using rule 46 (vm1 -> LBRACK vm2 RBRACK COMMA vm1 .)
    MINOREQT        reduce using rule 46 (vm1 -> LBRACK vm2 RBRACK COMMA vm1 .)
    DIFFERENT       reduce using rule 46 (vm1 -> LBRACK vm2 RBRACK COMMA vm1 .)
    ISEQUAL         reduce using rule 46 (vm1 -> LBRACK vm2 RBRACK COMMA vm1 .)
    RPARENT         reduce using rule 46 (vm1 -> LBRACK vm2 RBRACK COMMA vm1 .)
    RBRACK          reduce using rule 46 (vm1 -> LBRACK vm2 RBRACK COMMA vm1 .)
    COMMA           reduce using rule 46 (vm1 -> LBRACK vm2 RBRACK COMMA vm1 .)


state 287

    (102) condition1 -> elseif head_cond body . condition1
    (102) condition1 -> . elseif head_cond body condition1
    (103) condition1 -> . else body
    (104) condition1 -> . empty
    (105) elseif -> . ELSEIF
    (106) else -> . ELSE
    (164) empty -> .

    ELSEIF          shift and go to state 240
    ELSE            shift and go to state 241
    IF              reduce using rule 164 (empty -> .)
    PRINT           reduce using rule 164 (empty -> .)
    READ            reduce using rule 164 (empty -> .)
    ID              reduce using rule 164 (empty -> .)
    FOR             reduce using rule 164 (empty -> .)
    CIRCLE          reduce using rule 164 (empty -> .)
    SQUARE          reduce using rule 164 (empty -> .)
    TRIANGLE        reduce using rule 164 (empty -> .)
    RECTANGLE       reduce using rule 164 (empty -> .)
    EXIT            reduce using rule 164 (empty -> .)
    START_F         reduce using rule 164 (empty -> .)
    END_F           reduce using rule 164 (empty -> .)
    POINTER_COLOR   reduce using rule 164 (empty -> .)
    POINTER_SIZE    reduce using rule 164 (empty -> .)
    SPEED           reduce using rule 164 (empty -> .)
    POSITION        reduce using rule 164 (empty -> .)
    DOWN            reduce using rule 164 (empty -> .)
    UP              reduce using rule 164 (empty -> .)
    GO              reduce using rule 164 (empty -> .)
    LEFT            reduce using rule 164 (empty -> .)
    RIGHT           reduce using rule 164 (empty -> .)
    BACK            reduce using rule 164 (empty -> .)
    WHILE           reduce using rule 164 (empty -> .)
    RCURBRA         reduce using rule 164 (empty -> .)
    RETURN          reduce using rule 164 (empty -> .)

    elseif                         shift and go to state 237
    condition1                     shift and go to state 294
    else                           shift and go to state 238
    empty                          shift and go to state 239

state 288

    (71) read -> READ LPARENT id read1 RPARENT SEMICOLON .

    IF              reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    PRINT           reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    READ            reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    ID              reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    FOR             reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    CIRCLE          reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    SQUARE          reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    TRIANGLE        reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    RECTANGLE       reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    EXIT            reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    START_F         reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    END_F           reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    POINTER_COLOR   reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    POINTER_SIZE    reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    SPEED           reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    POSITION        reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    DOWN            reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    UP              reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    GO              reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    LEFT            reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    RIGHT           reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    BACK            reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    WHILE           reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    RCURBRA         reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    SEMICOLON       reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)
    RETURN          reduce using rule 71 (read -> READ LPARENT id read1 RPARENT SEMICOLON .)


state 289

    (72) read1 -> LBRACK exp RBRACK . LBRACK exp RBRACK
    (73) read1 -> LBRACK exp RBRACK .

    LBRACK          shift and go to state 295
    RPARENT         reduce using rule 73 (read1 -> LBRACK exp RBRACK .)


state 290

    (86) funCall3 -> COMMA funCallParam funCall3 .

    RPARENT         reduce using rule 86 (funCall3 -> COMMA funCallParam funCall3 .)


state 291

    (76) indice_dimensionada -> LBRACK exp RBRACK LBRACK exp . RBRACK

    RBRACK          shift and go to state 296


state 292

    (113) nuevo_for -> FOR LPARENT id COLON for2 RPARENT .

    LCURBRA         reduce using rule 113 (nuevo_for -> FOR LPARENT id COLON for2 RPARENT .)


state 293

    (119) dosExp -> LPARENT exp COMMA exp RPARENT .

    SEMICOLON       reduce using rule 119 (dosExp -> LPARENT exp COMMA exp RPARENT .)


state 294

    (102) condition1 -> elseif head_cond body condition1 .

    IF              reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    PRINT           reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    READ            reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    ID              reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    FOR             reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    CIRCLE          reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    SQUARE          reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    TRIANGLE        reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    RECTANGLE       reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    EXIT            reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    START_F         reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    END_F           reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    POINTER_COLOR   reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    POINTER_SIZE    reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    SPEED           reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    POSITION        reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    DOWN            reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    UP              reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    GO              reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    LEFT            reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    RIGHT           reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    BACK            reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    WHILE           reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    RCURBRA         reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)
    RETURN          reduce using rule 102 (condition1 -> elseif head_cond body condition1 .)


state 295

    (72) read1 -> LBRACK exp RBRACK LBRACK . exp RBRACK
    (150) exp -> . term
    (151) exp -> . term exp_o exp
    (156) term -> . factor term_o term
    (157) term -> . factor
    (160) factor -> . vcte
    (161) factor -> . openP expression closeP
    (38) vcte -> . cte_int
    (39) vcte -> . cte_float
    (40) vcte -> . cte_string
    (41) vcte -> . id
    (42) vcte -> . funCall
    (43) vcte -> . vectormatriz
    (154) openP -> . LPARENT
    (89) cte_int -> . negativo CTE_INT
    (90) cte_float -> . negativo CTE_FLOAT
    (91) cte_string -> . CTE_STRING
    (80) id -> . aidi indice_dimensionada
    (81) funCall -> . ID iniciaFunCall funCall2 terminaFunCall
    (44) vectormatriz -> . LBRACK vm1 RBRACK
    (45) vectormatriz -> . vm1
    (162) negativo -> . MINUS
    (163) negativo -> . empty
    (79) aidi -> . ID
    (46) vm1 -> . LBRACK vm2 RBRACK COMMA vm1
    (47) vm1 -> . LBRACK vm2 RBRACK
    (164) empty -> .

    LPARENT         shift and go to state 112
    CTE_STRING      shift and go to state 114
    ID              shift and go to state 63
    LBRACK          shift and go to state 115
    MINUS           shift and go to state 117
    CTE_INT         reduce using rule 164 (empty -> .)
    CTE_FLOAT       reduce using rule 164 (empty -> .)

    exp                            shift and go to state 297
    term                           shift and go to state 102
    factor                         shift and go to state 103
    vcte                           shift and go to state 104
    openP                          shift and go to state 105
    cte_int                        shift and go to state 106
    cte_float                      shift and go to state 107
    cte_string                     shift and go to state 108
    id                             shift and go to state 109
    funCall                        shift and go to state 110
    vectormatriz                   shift and go to state 111
    negativo                       shift and go to state 113
    aidi                           shift and go to state 64
    vm1                            shift and go to state 116
    empty                          shift and go to state 118

state 296

    (76) indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .

    EQUAL           reduce using rule 76 (indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .)
    MULT            reduce using rule 76 (indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .)
    DIVIDE          reduce using rule 76 (indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .)
    PLUS            reduce using rule 76 (indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .)
    MINUS           reduce using rule 76 (indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .)
    SEMICOLON       reduce using rule 76 (indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .)
    GREATERT        reduce using rule 76 (indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .)
    MINORT          reduce using rule 76 (indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .)
    GREATEREQT      reduce using rule 76 (indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .)
    MINOREQT        reduce using rule 76 (indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .)
    DIFFERENT       reduce using rule 76 (indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .)
    ISEQUAL         reduce using rule 76 (indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .)
    RPARENT         reduce using rule 76 (indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .)
    COMMA           reduce using rule 76 (indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .)
    RBRACK          reduce using rule 76 (indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .)
    LBRACK          reduce using rule 76 (indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .)
    COLON           reduce using rule 76 (indice_dimensionada -> LBRACK exp RBRACK LBRACK exp RBRACK .)


state 297

    (72) read1 -> LBRACK exp RBRACK LBRACK exp . RBRACK

    RBRACK          shift and go to state 298


state 298

    (72) read1 -> LBRACK exp RBRACK LBRACK exp RBRACK .

    RPARENT         reduce using rule 72 (read1 -> LBRACK exp RBRACK LBRACK exp RBRACK .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACK in state 64 resolved as shift
WARNING: shift/reduce conflict for RBRACK in state 179 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 232 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 253 resolved as shift
WARNING: reduce/reduce conflict in state 258 resolved using rule (return1 -> vcte)
WARNING: rejected rule (factor -> vcte) in state 258
